{"version":3,"sources":["config/config.videos.js","utils.js","consts.js","store/room.js","store/users.js","store/messages.js","modules/meeting.js","hooks/useOutsideClick.js","components/Popup/index.js","components/Popup/Popup.js","components/AutoHide/index.js","components/AutoHide/AutoHide.js","components/EmojiSelection/index.js","components/EmojiSelection/EmojiSelection.js","components/SpeechBubble/index.js","components/SpeechBubble/SpeechBubble.js","components/TextInput/index.js","components/TextInput/TextInput.js","components/UserDisplay/UserDisplay.js","components/UserDisplay/index.js","components/UserDisplay/UserList.js","components/SideRoom/index.js","components/SideRoom/SideRoom.js","components/YouTubePlayer/index.js","components/YouTubePlayer/YouTubePlayer.js","components/ChatMessage/index.js","components/ChatMessage/ChatMessage.js","components/ChatDrawer/index.js","components/ChatDrawer/ChatDrawer.js","components/Room/index.js","components/Room/Room.js","components/BottomNav/index.js","components/BottomNav/BottomNav.js","App.js","serviceWorker.js","store/index.js","index.js"],"names":["soundtrackPlayerConfig","id","containerClassName","videoId","options","playlist","width","height","playerVars","autoplay","controls","showinfo","modestbranding","loop","fs","cc_load_policy","iv_load_policy","autohide","disablekb","start","onReady","e","target","setVolume","playVideo","videoArtPlayerConfig","origin","makeReducer","actionHandlers","initialState","state","action","type","getFromLocalStorage","key","defaultValue","value","window","localStorage","getItem","getLocalTracks","JitsiConference","audio","getLocalAudioTrack","video","getLocalVideoTrack","getTracks","userId","isLocal","tracks","getParticipantById","_","find","t","getType","ROOMS","block","roomName","jitsiRoomName","sideRooms","toilet","name","maxSeats","initialRoom","location","href","indexOf","getRoom","room","roomReducer","SET_ROOM","payload","addUser","user","updateUser","update","getLocalUser","users","getUsersByActiveRoom","filter","u","activeRoom","reduceUpdateUser","usersReducer","ADD_USER","REMOVE_USER","omit","UPDATE_USER","ADD_REMOTE_USER_TRACK","trackType","isMuted","UPDATE_DOMINANT_SPEAKER","dominantUserId","console","warn","forEach","isDominantSpeaker","getAllMessages","messages","PUSH_MESSAGE","msg","DELETE_ALL_MESSAGES","DELETE_MESSAGE","m","connect","dispatch","getState","JitsiMeetJS","events","connection","CONNECTION_ESTABLISHED","CONNECTION_FAILED","CONNECTION_DISCONNECTED","JitsiConnection","jitsiConfig","onConnectionSuccess","roomConfig","joinConference","onConnectionFailed","error","addEventListener","disconnect","removeEventListener","undefined","JSON","stringify","initJitsiConference","conference","DISPLAY_NAME_CHANGED","MESSAGE_RECEIVED","CONFERENCE_JOINED","PRIVATE_MESSAGE_RECEIVED","USER_JOINED","TRACK_ADDED","TRACK_REMOVED","USER_LEFT","DOMINANT_SPEAKER_CHANGED","on","displayName","addCommandListener","attributes","emoji","conference_id","globalUID","text","ts","msg_object","parse","from_me","to_me","recipient","Date","getTime","onConferenceJoined","onUserJoined","onRemoteTrackAdded","onRemoteTrackRemoved","onUserLeft","onSideRoomJoined","onSideRoomLeft","join","myUserId","length","chars","result","i","Math","floor","random","randomString","setLocalDisplayName","setLocalEmoji","setGlobalUID","create_local_track_options","devices","cameraDeviceId","micDeviceId","createLocalTracks","then","onLocalTracks","catch","in_tracks","map","local_track","setItem","getDeviceId","track","TRACK_MUTE_CHANGED","onTrackMuteChanged","setSenderVideoConstraint","unmute","mute","addTrack","hasTracks","setTimeout","getDisplayName","getParticipantId","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","deviceId","addRemoteUserTrack","containers","removeUser","to","onVideoMuteToggle","ownerEndpointId","setDisplayName","eventEmitter","emit","sendCommand","sendPrivateMessage","targetGlobalUID","targetDisplayName","sendMessage","unload","each","dispose","leave","useOutsideClick","ref","callback","handleClick","current","contains","useEffect","document","Popup","children","className","onOutsideClick","useRef","classNames","AutoHide","refreshKey","ttl","useState","isVisible","setIsVisible","timer","clearTimeout","EmojiList","onSelection","localUser","useSelector","onEmojiClick","stopPropagation","EMOJIES","onClick","selected","SpeechBubble","ChatInput","placeholder","submit","dismiss","setText","autoFocus","onChange","onKeyPress","isEmpty","charCode","onKeyDown","keyCode","attach","detachAndDispose","detach","UserDisplay","has_audio","has_video","muted_audio","muted_video","isAudioActive","videoRef","audioRef","videoTrack","setVideoTrack","audioTrack","setAudioTrack","popup","setPopup","bubbleMessage","last","ts_diff_secs","abs","getUserLastPublicMessage","hidePopup","videoClassNames","prompt","sendPublicMessage","TextInputBubble","newName","autoPlay","muted","isNil","UserList","renderUser","useCallback","orderBy","SideRoom","emptySeatCount","size","localUserInRoom","onFreeSeatClick","from","joinSideRoom","Array","o","YouTubePlayer","volume","props","player","setPlayer","ChatMessage","messageClassNames","getFromText","getToText","date","hours_str","getHours","toString","padStart","minutes_str","getMinutes","nice_date","ChatDrawer","all_messages","Room","withVideoArt","mainAreaUsers","userInMainArea","toLower","removeCommand","sendCommandOnce","leaveSideRoom","sideRoom","BottomNav","useDispatch","goToRoom","changeConference","fullscreenElement","exitFullscreen","documentElement","requestFullscreen","App","soundtrackVolume","playSoundtrack","Boolean","hostname","match","store","rootReducer","combineReducers","messagesReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","logger","thunk","setLogLevel","logLevels","ERROR","init","setInterval","participants","getParticipants","p","_connectionStatus","_id","kickParticipant","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0115e757.chunk.js","sourcesContent":["\nexport const soundtrackPlayerConfig = {\n  id: 'player-soundtrack',\n  containerClassName: 'player-soundtrack',\n  videoId: 'T92xtvU4WRc',\n  options: {\n    videoId: 'T92xtvU4WRc',\n    playlist: 'QtXx3Qubmys',\n    width: 1,               // Player width (in px)\n    height: 1,              // Player height (in px)\n    playerVars: {\n      autoplay: 1,        // Auto-play the video on load\n      controls: 0,        // Show pause/play buttons in player\n      showinfo: 0,        // Hide the video title\n      modestbranding: 1,  // Hide the Youtube Logo\n      loop: 1,            // Run the video in a loop\n      fs: 1,              // Hide the full screen button\n      cc_load_policy: 1, // Hide closed captions\n      iv_load_policy: 3,  // Hide the Video Annotations\n      autohide: 1,         // Hide video controls when playing,\n      disablekb: 1,\n      start: 100\n    },\n  },\n  onReady: e => {\n    e.target.setVolume(100)\n    e.target.playVideo()\n  }\n}\n\nexport const videoArtPlayerConfig = {\n  id: 'muteYouTubeVideoPlayer',\n  containerClassName: 'video-art-player',\n  videoId: '3V9bPvna3nM',\n  options: {\n    videoId: '3V9bPvna3nM', // YouTube Video ID\n    // width: 640, // Player width (in px)\n    // height: 480, // Player height (in px)\n    playerVars: {\n      autoplay: 1, // Auto-play the video on load\n      controls: 0, // Show pause/play buttons in player\n      showinfo: 0, // Hide the video title\n      modestbranding: 1, // Hide the Youtube Logo\n      loop: 1, // Run the video in a loop\n      fs: 0, // Hide the full screen button\n      cc_load_policy: 1, // Hide closed captions\n      iv_load_policy: 3, // Hide the Video Annotations\n      autohide: 1, // Hide video controls when playing,\n      disablekb: 1,\n      playlist: '3V9bPvna3nM', // for the loop\n      // start: offset,\n      origin: 'https://foosa-a977b5f6.localhost.run',\n    },\n  },\n  onReady: e => {\n    e.target.playVideo()\n  }\n}","import _ from 'lodash'\n\nexport const makeReducer = (actionHandlers, initialState) => {\n    return (state = initialState, action) => {\n        if (actionHandlers[action.type]) {\n            return actionHandlers[action.type](state, action)\n        }\n        return state\n    }\n}\n\nexport const getFromLocalStorage = (key, defaultValue) => {\n    let value = window.localStorage.getItem(key)\n    return !value || value === 'null' ? defaultValue : value\n}\n\nexport const getLocalTracks = () => {\n    if (!window.JitsiConference) return {}\n\n    return {\n        audio: window.JitsiConference.getLocalAudioTrack(),\n        video: window.JitsiConference.getLocalVideoTrack()\n    }\n}\n\nexport const getTracks = (userId, isLocal) => {\n    if (isLocal) return getLocalTracks()\n\n    const participant = window.JitsiConference.getParticipantById(userId)\n    const tracks = participant.getTracks()\n    // const types = _.map(tracks, t => t.getType())\n    // console.warn('remote tracks = ' + JSON.stringify(types))\n    return {\n        audio: _.find(tracks, t => t.getType() === 'audio'),\n        video: _.find(tracks, t => t.getType() === 'video'),\n    }\n}\n\n\nexport const randomString = (length) => {\n    const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    let result = '';\n    for (let i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}\n","export const ROOMS = {\n  block: {\n    roomName: 'block',\n    jitsiRoomName: 'block_demo_block',\n    sideRooms: [],\n  },\n  toilet: {\n    roomName: 'toilet',\n    jitsiRoomName: 'block_demo_toiletsss',\n    sideRooms: [{ name: 'second_room', maxSeats: 5 }],\n  }\n}","import { makeReducer } from '../utils'\nimport { ROOMS } from '../consts'\n\nconst initialRoom = window.location.href.indexOf('toilet') > -1 ? ROOMS.toilet : ROOMS.block\n\nexport const setRoom = room => ({\n  type: 'SET_ROOM',\n  payload: { room },\n})\n\nexport const getRoom = state => state.room\n\nconst roomReducer = makeReducer({\n  SET_ROOM: (state, action) => action.payload.room,\n}, initialRoom)\n\nexport default roomReducer","import _ from 'lodash'\nimport {makeReducer} from '../utils'\n\nexport const addUser = user => ({\n    type: 'ADD_USER',\n    payload: {user},\n})\n\nexport const removeUser = userId => ({\n    type: 'REMOVE_USER',\n    payload: {userId},\n})\n\nexport const updateUser = (userId, update) => ({\n    type: 'UPDATE_USER',\n    payload: {userId, update},\n})\n\nexport const addRemoteUserTrack = (userId, trackType, isMuted) => ({\n    type: 'ADD_REMOTE_USER_TRACK',\n    payload: {userId, trackType, isMuted},\n})\n\nexport const updateDominantSpeaker = userId => ({\n    type: 'UPDATE_DOMINANT_SPEAKER',\n    payload: {userId},\n})\n\nexport const getUser = userId => state => _.get(state.users, userId)\n\nexport const getUserByGlobalUID = globalUID => state => _.find(state.users, {globalUID: globalUID})\n\nexport const getLocalUser = state => _.find(state.users, {isLocal: true})\n\nexport const getRemoteUsers = state => _.pickBy(state.users, u => !u.isLocal)\n\nexport const getUsersByActiveRoom = roomName => state => _.filter(state.users, u => u.activeRoom === roomName)\n\nconst reduceUpdateUser = (state, user, update) => {\n    return {\n        ...state,\n        [user.id]: {\n            ...user,\n            ...update,\n        },\n    }\n}\n\nconst usersReducer = makeReducer({\n    ADD_USER: (state, action) => {\n        const {user} = action.payload\n        return {\n            ...state,\n            [user.id]: user\n        }\n    },\n    REMOVE_USER: (state, action) => {\n        const {userId} = action.payload\n        return _.omit(state, userId)\n    },\n    UPDATE_USER: (state, action) => {\n        const {userId, update} = action.payload\n        const user = state[userId] || {}\n\n        return reduceUpdateUser(state, user, update)\n    },\n    ADD_REMOTE_USER_TRACK: (state, action) => {\n        const {userId, trackType, isMuted} = action.payload\n        const user = state[userId] || {}\n\n        const update = {\n            [`has_${trackType}`]: true,\n            [`muted_${trackType}`]: isMuted\n        }\n\n        return reduceUpdateUser(state, user, update)\n    },\n    UPDATE_DOMINANT_SPEAKER: (state, action) => {\n        const dominantUserId = action.payload.userId\n\n\n        console.warn(\"UPDATE_DOMINANT_SPEAKER\", action)\n\n        _.forEach(state, (user) => {\n            user.isDominantSpeaker = (user.id === dominantUserId)\n        })\n\n        return state\n    }\n}, {})\n\nexport default usersReducer\n","import _ from 'lodash'\nimport {makeReducer} from '../utils'\n\nexport const pushMessage = (msg) => dispatch => {\n    const key = `${msg.id}-${(new Date()).getTime()}`\n\n    dispatch({\n        type: 'PUSH_MESSAGE',\n        payload: {msg},\n    })\n\n    // setTimeout(() => dispatch(deleteMessage(key)), 7000)\n}\n\nexport const deleteMessage = key => ({\n    type: 'DELETE_MESSAGE',\n    payload: {key},\n})\n\nexport const deleteAllMessages = () => ({\n    type: 'DELETE_ALL_MESSAGES'\n})\n\nexport const getUserMessages = userId => state => _.filter(state.messages, m => m.id === userId)\n\n// Get the last public message from this user, sent in the last 10 secs\nexport const getUserLastPublicMessage = globalUID => state => _.last(_.filter(state.messages, (m) => {\n    let ts_diff_secs = Math.abs(((new Date()) - m.ts) / 1000)\n    return (m.globalUID === globalUID) && (m.recipient === 'public') && (ts_diff_secs<10)\n}))\n\n\nexport const getAllMessages = state => state.messages\n\nconst roomReducer = makeReducer({\n    PUSH_MESSAGE: (state, action) => {\n        return [...state, action.payload.msg]\n    },\n    DELETE_ALL_MESSAGES: (state, action) => {\n        return []\n    },\n    DELETE_MESSAGE: (state, action) => {\n        return _.filter(state, m => m.key !== action.payload.key)\n    },\n}, [])\n\nexport default roomReducer\n","import _ from 'lodash'\nimport {getFromLocalStorage, getLocalTracks, randomString} from '../utils'\nimport {getRoom, setRoom} from '../store/room'\nimport {\n    addUser,\n    updateUser,\n    addRemoteUserTrack,\n    removeUser,\n    updateDominantSpeaker,\n} from '../store/users'\nimport {deleteAllMessages, pushMessage} from '../store/messages'\nimport {jitsi as jitsiConfig} from '../config/config.dev'\n\nconst JOIN_MINI_CONFERENCE_CMD = 'JOIN_MINI_CONFERENCE'\nconst LEAVE_MINI_CONFERENCE_CMD = 'LEAVE_MINI_CONFERENCE'\nconst SET_GLOBAL_UID_CMD = 'SET_GLOBAL_UID'\nconst SET_EMOJI_CMD = 'SET_EMOJI'\nconst DEFAULT_EMOJI = '😷'\nconst DEFAULT_USERNAME = 'anonymous'\n\nexport const initJitsi = store => {\n    console.warn('initJitsi')\n\n    window.JitsiMeetJS.init(jitsiConfig)\n\n    connect(store)\n}\n\nconst connect = ({dispatch, getState}) => {\n    const {CONNECTION_ESTABLISHED, CONNECTION_FAILED, CONNECTION_DISCONNECTED} = window.JitsiMeetJS.events.connection\n\n    window.JitsiConnection = new window.JitsiMeetJS.JitsiConnection(null, null, jitsiConfig)\n\n    const onConnectionSuccess = () => {\n        console.warn('onConnectionSuccess')\n\n        const roomConfig = getRoom(getState())\n        joinConference(dispatch, roomConfig)\n    }\n\n    const onConnectionFailed = e => {\n        console.error('Connection Failed!', e)\n    }\n\n    const disconnect = () => {\n        window.JitsiConnection.removeEventListener(CONNECTION_ESTABLISHED, onConnectionSuccess)\n        window.JitsiConnection.removeEventListener(CONNECTION_FAILED, onConnectionFailed)\n        window.JitsiConnection.removeEventListener(CONNECTION_DISCONNECTED, disconnect)\n    }\n\n    // bind connection events\n    window.JitsiConnection.addEventListener(CONNECTION_ESTABLISHED, onConnectionSuccess)\n    window.JitsiConnection.addEventListener(CONNECTION_FAILED, onConnectionFailed)\n    window.JitsiConnection.addEventListener(CONNECTION_DISCONNECTED, disconnect)\n\n    window.JitsiConnection.connect(undefined)\n}\n\n/////////////////\n// ROOMS\n/////////////////\nconst joinConference = (dispatch, roomConfig) => {\n    if (!window.JitsiConnection) return\n\n    console.warn('roomConfig=' + JSON.stringify(roomConfig))\n\n    const JitsiConference = window.JitsiConnection.initJitsiConference(roomConfig.jitsiRoomName, jitsiConfig)\n\n    const {\n        DISPLAY_NAME_CHANGED, MESSAGE_RECEIVED, PRIVATE_MESSAGE_RECEIVED,\n        CONFERENCE_JOINED, USER_JOINED, TRACK_ADDED, TRACK_REMOVED, USER_LEFT,\n        DOMINANT_SPEAKER_CHANGED\n    } = window.JitsiMeetJS.events.conference\n\n    JitsiConference.on(DISPLAY_NAME_CHANGED, (id, displayName) => {\n        dispatch(updateUser(id, {displayName}))\n    })\n\n    JitsiConference.on(DOMINANT_SPEAKER_CHANGED, (id) => {\n        dispatch(updateDominantSpeaker(id))\n    })\n\n    JitsiConference.addCommandListener(SET_EMOJI_CMD, e => {\n        const userId = e.attributes['id']\n        const emoji = e.attributes['emoji']\n\n        console.warn(SET_EMOJI_CMD, userId, emoji)\n\n        dispatch(updateUser(userId, {emoji}))\n    })\n\n    JitsiConference.addCommandListener(SET_GLOBAL_UID_CMD, e => {\n\n        const conference_id = e.attributes['conference_id']\n        const globalUID = e.attributes['globalUID']\n\n        console.warn(SET_GLOBAL_UID_CMD, conference_id, globalUID, e.attributes)\n\n        dispatch(updateUser(conference_id, {globalUID}))\n    })\n\n    JitsiConference.on(MESSAGE_RECEIVED, function (id, text, ts) {\n        // TODO(DROR): ts can be none here,\n        console.warn('MESSAGE_RECEIVED', id, text, ts)\n        let msg_object = null\n        try {\n            msg_object = JSON.parse(text)\n\n        } catch (e) {\n            return;\n        }\n\n        const globalUID = getFromLocalStorage('GLOBAL_UID')\n        msg_object.from_me = msg_object.globalUID === globalUID\n        msg_object.to_me = msg_object.recipient === globalUID\n\n        if (msg_object.from_me || msg_object.to_me || msg_object.recipient === \"public\") {\n            dispatch(pushMessage({\n                ...msg_object,\n                ts: ts ? new Date(Date.parse(ts)) : new Date(),  // ts is only sent when we refresh\n            }))\n        }\n\n    })\n\n\n    JitsiConference.on(CONFERENCE_JOINED, onConferenceJoined(dispatch))\n    JitsiConference.on(USER_JOINED, onUserJoined(dispatch))\n    JitsiConference.on(TRACK_ADDED, onRemoteTrackAdded(dispatch))\n    JitsiConference.on(TRACK_REMOVED, onRemoteTrackRemoved(dispatch))\n    JitsiConference.on(USER_LEFT, onUserLeft(dispatch))\n\n    JitsiConference.addCommandListener(JOIN_MINI_CONFERENCE_CMD, onSideRoomJoined(dispatch))\n    JitsiConference.addCommandListener(LEAVE_MINI_CONFERENCE_CMD, onSideRoomLeft(dispatch))\n\n    window.JitsiConference = JitsiConference\n\n    dispatch(setRoom(roomConfig))\n\n    JitsiConference.join()\n}\n\nexport const changeConference = roomConfig => dispatch => {\n    if (!window.JitsiConference) return\n\n    window.JitsiConference.leave()\n        .then(() => {\n            dispatch(deleteAllMessages())\n            joinConference(dispatch, roomConfig)\n        })\n}\n\n/////////////////\n// LOCAL USER\n\n\n/////////////////\nconst onConferenceJoined = dispatch => () => {\n    console.warn('onConferenceJoined')\n\n    const userId = window.JitsiConference.myUserId()\n\n    const displayName = getFromLocalStorage('DISPLAY_NAME', DEFAULT_USERNAME)\n    const emoji = getFromLocalStorage('EMOJI', DEFAULT_EMOJI)\n    const globalUID = getFromLocalStorage('GLOBAL_UID', randomString(16))\n\n    dispatch(addUser({\n        id: userId,\n        globalUID: globalUID,\n        isLocal: true,\n        displayName: displayName,\n        emoji: emoji,\n        activeRoom: 'MAIN',\n    }))\n\n    // Send the cached display_name and emoji to other participants\n    setLocalDisplayName(userId, displayName)\n    setLocalEmoji(emoji)\n    setGlobalUID(globalUID)\n\n    // We want to explicitly ask for the device we last used\n    // for dror for example, switching rooms selects the snap camera instead of the regular\n    // This fixes it\n    const create_local_track_options = {\n        devices: [\"video\", \"audio\"],\n        cameraDeviceId: getFromLocalStorage(\"video_device_id\", null),\n        micDeviceId: getFromLocalStorage(\"audio_device_id\", null),\n    }\n\n    // Try to get audio/video. TODO(DROR): This might fail, we need the users's help\n    window.JitsiMeetJS.createLocalTracks(create_local_track_options)\n        .then(onLocalTracks(dispatch))\n        .catch((error) => {\n            throw error\n        })\n}\n\nconst onLocalTracks = dispatch => in_tracks => {\n\n    console.error(\"onLocalTracks\", in_tracks)\n\n    _.map(in_tracks, (local_track) => {\n\n        window.localStorage.setItem(`${local_track.getType()}_device_id`, local_track.getDeviceId())\n\n        local_track.addEventListener(\n            window.JitsiMeetJS.events.track.TRACK_MUTE_CHANGED,\n            onTrackMuteChanged(dispatch)\n        )\n\n        // Send lower quality video by default\n        window.JitsiConference.setSenderVideoConstraint(180)\n\n        if (local_track.getType() === 'video') {\n            const last_video_preference = getFromLocalStorage('SHOW_VIDEO', 'false')\n            if (last_video_preference === 'true') {\n                console.warn('unmuting video')\n                local_track.unmute()\n            } else {\n                local_track.mute()\n            }\n        } else {\n            // Always start with audio muted\n            local_track.mute().then(() => {\n                console.warn('audio muted...')\n            })\n        }\n\n        window.JitsiConference.addTrack(local_track).then(() => {\n\n            console.warn('FOO', local_track)\n\n            dispatch(updateUser(window.JitsiConference.myUserId(), {\n                hasTracks: true,\n                [`muted_${local_track.getType()}`]: local_track.isMuted(),\n                [`has_${local_track.getType()}`]: true\n            }))\n\n            // Send lower quality video by default, incase the first time didn't work\n            window.setTimeout(function () {\n                window.JitsiConference.setSenderVideoConstraint(180)\n            }, 1000)\n        })\n    })\n\n    dispatch(updateUser(window.JitsiConference.myUserId(), {hasTracks: true}))\n}\n\n/////////////////\n// REMOTE USERS\n/////////////////\nconst onUserJoined = dispatch => userId => {\n    const user = window.JitsiConference.getParticipantById(userId)\n    console.warn('onUserJoined', user)\n\n    dispatch(addUser({\n        id: userId,\n        activeRoom: 'MAIN',\n        displayName: user.getDisplayName()\n    }))\n}\n\nconst onRemoteTrackAdded = dispatch => track => {\n    if (track.isLocal()) {\n        window.JitsiConference.setSenderVideoConstraint(180)\n        return\n    }\n\n    console.warn('Remote TRACK_ADDED', track.getParticipantId(), track.isMuted(), track)\n\n    track.addEventListener(window.JitsiMeetJS.events.track.TRACK_MUTE_CHANGED, onTrackMuteChanged(dispatch))\n    track.addEventListener(window.JitsiMeetJS.events.track.LOCAL_TRACK_STOPPED, () =>\n        console.warn('remote track stoped')\n    )\n    track.addEventListener(\n        window.JitsiMeetJS.events.track.TRACK_AUDIO_OUTPUT_CHANGED,\n        (deviceId) =>\n            console.warn(`track audio output device was changed to ${deviceId}`)\n    )\n\n    const userId = track.getParticipantId()\n\n    dispatch(addRemoteUserTrack(userId, track.getType(), track.isMuted()))\n}\n\nconst onRemoteTrackRemoved = dispatch => track => {\n    if (track.isLocal()) {\n        return\n    }\n    console.warn('Remote TRACK_REMOVED', track, track.containers)\n\n    // const userId = track.getParticipantId()\n    // dispatch(removeRemoteTrack(userId, track))\n}\n\nconst onUserLeft = dispatch => userId => {\n    dispatch(removeUser(userId))\n}\n\n/////////////////\n// SIDE ROOMS\n/////////////////\nexport const joinSideRoom = roomName => {\n    const room = window.JitsiConference\n    if (!room) return\n\n    const userId = room.myUserId()\n\n    room.sendCommand(JOIN_MINI_CONFERENCE_CMD, {\n        attributes: {\n            from: userId,\n            to: roomName\n        }\n    })\n\n    // dispatch(updateUser(userId, { activeRoom: roomName }))\n}\n\nconst onSideRoomJoined = dispatch => e => {\n    const userId = e.attributes['from']\n    const to = e.attributes['to']\n\n    console.warn(JOIN_MINI_CONFERENCE_CMD, userId, to)\n\n    if (userId === window.JitsiConference.myUserId()) {\n        const {audio} = getLocalTracks()\n        if (audio) {\n            audio.unmute()\n        }\n    }\n\n    dispatch(updateUser(userId, {activeRoom: to}))\n}\n\nexport const leaveSideRoom = roomName => {\n    const room = window.JitsiConference\n    if (!room) return\n\n    room.removeCommand(JOIN_MINI_CONFERENCE_CMD)\n    room.sendCommandOnce(LEAVE_MINI_CONFERENCE_CMD, {\n        attributes: {\n            from: room.myUserId(),\n            to: roomName\n        }\n    })\n\n    // dispatch(updateUser(room.myUserId(), { activeRoom: 'MAIN' }))\n}\n\nconst onSideRoomLeft = dispatch => e => {\n    if (!window.JitsiConference) return\n\n    const userId = e.attributes['from']\n\n    console.warn(LEAVE_MINI_CONFERENCE_CMD, userId)\n\n    if (userId === window.JitsiConference.myUserId()) {\n        const {audio} = getLocalTracks()\n        audio && audio.mute()\n    }\n\n    dispatch(updateUser(userId, {activeRoom: 'MAIN'}))\n}\n\n//////////////////////\n// USER INTERACTIONS\n//////////////////////\nexport const onVideoMuteToggle = () => {\n    const {video} = getLocalTracks()\n    if (!video) {\n        return\n    }\n    if (video.isMuted()) {\n        video.unmute()\n        window.localStorage.setItem('SHOW_VIDEO', 'true')\n    } else {\n        video.mute()\n        window.localStorage.setItem('SHOW_VIDEO', 'false')\n    }\n}\n\nconst onTrackMuteChanged = dispatch => track => {\n    console.warn('TRACK_MUTE_CHANGED', track)\n\n    if (!track) {\n        return\n    }\n    const userId = track.ownerEndpointId ? track.ownerEndpointId : window.JitsiConference.myUserId()\n\n    dispatch(updateUser(userId, {\n        [`muted_${track.getType()}`]: track.isMuted()\n    }))\n\n}\n\nconst onLocalTrackMuteChanged = () => {\n}\n\nconst onLocalTrackStopped = () => {\n}\n\nconst OnLocalTrackAudioOutputChanged = () => {\n}\n\nexport const setLocalDisplayName = (userId, displayName) => {\n    if (!window.JitsiConference) return\n\n    console.warn('setLocalDisplayName')\n\n    // This will send the event name to other participants\n    window.JitsiConference.setDisplayName(displayName)\n\n    // Save this on localStorage\n    window.localStorage.setItem('DISPLAY_NAME', displayName)\n\n    // Because DISPLAY_NAME_CHANGED is not fired for local users, fire it\n    window.JitsiConference.eventEmitter.emit(window.JitsiMeetJS.events.conference.DISPLAY_NAME_CHANGED, userId, displayName)\n}\n\nexport const setLocalEmoji = (emoji) => {\n    if (!window.JitsiConference) return\n\n    // This will send the event name to other participants\n    window.JitsiConference.sendCommand(SET_EMOJI_CMD, {\n            attributes: {\n                'id': window.JitsiConference.myUserId(),\n                'emoji': emoji\n            }\n        }\n    )\n    window.localStorage.setItem('EMOJI', emoji)\n}\n\nexport const setGlobalUID = (globalUID) => {\n    if (!window.JitsiConference) return\n\n    // This will send the event name to other participants\n    window.JitsiConference.sendCommand(SET_GLOBAL_UID_CMD, {\n            attributes: {\n                'globalUID': globalUID,\n                'conference_id': window.JitsiConference.myUserId()\n            }\n        }\n    )\n    window.localStorage.setItem('GLOBAL_UID', globalUID)\n}\n\nexport const sendPublicMessage = (msg) => {\n    sendPrivateMessage(\"public\", \"public\", msg);\n}\n\nexport const sendPrivateMessage = (targetGlobalUID, targetDisplayName, msg) => {\n    if (!window.JitsiConference) return\n\n    console.error(\"sendPrivate\", targetGlobalUID, targetDisplayName, msg)\n\n    // TODO(DROR,ASAF): Can we access the state here?\n    const displayName = getFromLocalStorage('DISPLAY_NAME', DEFAULT_USERNAME)\n    const emoji = getFromLocalStorage('EMOJI', DEFAULT_EMOJI)\n\n\n    const msg_object = {\n        globalUID: getFromLocalStorage('GLOBAL_UID'),\n        displayName: displayName,\n        targetDisplayName: targetDisplayName,\n        emoji: emoji,\n        recipient: targetGlobalUID,\n        text: msg\n    }\n\n    window.JitsiConference.sendMessage(JSON.stringify(msg_object))\n}\n\n/////////////////\n// MISC\n/////////////////\nexport const kickInterruptedConnections = () => {\n    if (!window.JitsiConference) return\n\n    const participants = window.JitsiConference.getParticipants()\n    _.forEach(participants, p => {\n        if (p._connectionStatus === 'interrupted') {\n            console.warn('Kicking participant because of interrupted connection', p._id)\n            window.JitsiConference.kickParticipant(p._id)\n        }\n    })\n}\n\nexport const unload = () => {\n    if (!window.JitsiConference) return\n\n    _.each(window.JitsiConference.getLocalTracks(), track => track.dispose())\n    window.JitsiConference.leave()\n    window.connection.disconnect()\n}\n","import { useEffect } from 'react'\n\nconst useOutsideClick = (ref, callback) => {\n    const handleClick = e => {\n        if (ref.current && !ref.current.contains(e.target)) {\n            callback(e)\n        }\n    }\n    useEffect(() => {\n        document.addEventListener('click', handleClick)\n        return () => {\n            document.removeEventListener('click', handleClick)\n        }\n    })\n}\nexport default useOutsideClick","import Popup from './Popup'\n\nexport default Popup","import React, { useRef } from 'react'\nimport classNames from 'classnames'\nimport useOutsideClick from '../../hooks/useOutsideClick'\n\nconst Popup = ({ children, className, onOutsideClick }) => {\n\n    const ref = useRef(null)\n\n    useOutsideClick(ref, onOutsideClick)\n\n    return (\n        <div className={classNames('popup', className)} ref={ref}>\n            {children}\n        </div>\n    )\n}\n\nexport default Popup\n","import AutoHide from './AutoHide'\n\nexport default AutoHide","import React, { useEffect, useState } from 'react'\n\nconst AutoHide = ({ children, refreshKey, ttl = -1 }) => {\n\n    const [isVisible, setIsVisible] = useState(true)\n\n    useEffect(() => {\n        if (ttl > -1) {\n            setIsVisible(true)\n            const timer = setTimeout(() => {\n                setIsVisible(false)\n            }, ttl)\n            return () => clearTimeout(timer)\n        }\n    }, [refreshKey])\n\n    return isVisible && children\n}\n\nexport default AutoHide\n","import EmojiList from './EmojiSelection'\n\nexport default EmojiList","import React from 'react'\nimport _ from 'lodash'\nimport classNames from 'classnames'\nimport { useSelector } from 'react-redux'\nimport { getLocalUser } from '../../store/users'\nimport { setLocalEmoji } from '../../modules/meeting'\nimport EMOJIES from '../../config/config.emoji'\nimport './EmojiSelection.scss'\n\nconst EmojiSelection = ({ onSelection }) => {\n\n    const localUser = useSelector(getLocalUser)\n\n    const onEmojiClick = emoji => e => {\n        e.stopPropagation()\n\n        if (emoji === localUser.emoji) return\n\n        setLocalEmoji(emoji)\n        onSelection && onSelection(emoji)\n    }\n\n    return (\n        <div className=\"emoji-selection\">\n            {_.map(EMOJIES, (emoji, i) => (\n                <div key={`emoji-${i}`} onClick={onEmojiClick(emoji)}\n                     className={classNames('emoji-item', { selected: emoji === localUser.emoji })}>{emoji}</div>\n            ))}\n        </div>\n    )\n}\n\nexport default EmojiSelection\n","import SpeechBubble from './SpeechBubble'\n\nexport default SpeechBubble","import React from 'react'\nimport classNames from 'classnames'\nimport './SpeechBubble.scss'\n\nconst SpeechBubble = ({ children, className }) => {\n    return (\n        <div className={classNames(\"bubble-wrapper\", className)} onClick={e => e.stopPropagation()}>\n            <div className=\"speech-bubble\">{children}</div>\n        </div>\n    )\n}\n\nexport default SpeechBubble\n","import ChatInput from './TextInput'\n\nexport default ChatInput","import React, { useState } from 'react'\nimport _ from 'lodash'\nimport './TextInput.scss'\n\nconst TextInput = ({ placeholder, submit, dismiss }) => {\n\n    const [text, setText] = useState('')\n\n    const onKeyPress = e => {\n        if (_.isEmpty(text)) return\n\n        // submit on \"enter\"\n        if (e.charCode === 13) {\n            submit(text)\n        }\n    }\n\n    const onKeyDown = e => {\n        // dismiss on \"esc\"\n        if (e.keyCode === 27) {\n            dismiss()\n        }\n    }\n\n    return (\n        <div className=\"text-input\">\n            <input type=\"text\" value={text} autoFocus placeholder={placeholder}\n                   onChange={e => setText(e.target.value)} onKeyPress={onKeyPress} onKeyDown={onKeyDown}/>\n        </div>\n    )\n}\n\nexport default TextInput\n","import React, {useEffect, useRef, useState} from 'react'\nimport _ from 'lodash'\nimport {getTracks} from '../../utils'\nimport {sendPrivateMessage, sendPublicMessage, setLocalDisplayName} from '../../modules/meeting'\nimport {getUserLastPublicMessage} from '../../store/messages'\nimport classNames from 'classnames'\nimport './UserDisplay.scss'\nimport {useSelector} from 'react-redux'\nimport Popup from '../Popup'\nimport AutoHide from '../AutoHide'\nimport EmojiSelection from '../EmojiSelection'\nimport SpeechBubble from '../SpeechBubble'\nimport TextInput from '../TextInput'\n\nconst attach = (track, ref) => track && ref.current && track.attach(ref.current)\n\nconst detachAndDispose = (track, ref) => {\n    if (track && ref.current) {\n        track.detach(ref.current)\n        track.dispose()\n    }\n}\n\nconst UserDisplay = ({id: userId, globalUID, isLocal, has_audio, has_video, muted_audio, muted_video, displayName, emoji, isAudioActive, isDominantSpeaker}) => {\n\n    const videoRef = useRef(null)\n    const audioRef = useRef(null)\n\n    const [videoTrack, setVideoTrack] = useState(null)\n    const [audioTrack, setAudioTrack] = useState(null)\n\n    const [popup, setPopup] = useState(null)\n\n    const bubbleMessage = useSelector(getUserLastPublicMessage(globalUID))\n\n    useEffect(() => {\n\n        if (has_video) {\n            const {video} = getTracks(userId, isLocal)\n            attach(video, videoRef)\n            setVideoTrack(video)\n        }\n\n        return () => {\n            if (has_audio || has_video) {\n                detachAndDispose(videoTrack, videoRef)\n            }\n        }\n    }, [has_video, videoRef])\n\n    useEffect(() => {\n\n        if (has_audio) {\n            const {audio} = getTracks(userId, isLocal)\n            attach(audio, audioRef)\n            setAudioTrack(audio)\n        }\n\n        return () => {\n            if (has_audio) {\n                detachAndDispose(audioTrack, audioRef)\n            }\n        }\n    }, [has_audio, audioRef])\n\n    const onClick = e => {\n        e.stopPropagation()\n\n        if (isLocal) {\n            //send public message\n            const msg = window.prompt('Say something:')\n            if (msg) {\n                sendPublicMessage(msg)\n            }\n        } else {\n            // send private message\n            const msg = window.prompt(`Say something to ${displayName}:`)\n            if (msg) {\n                sendPrivateMessage(globalUID, displayName, msg)\n            }\n        }\n\n    }\n\n    const onNameClick = e => {\n        e.stopPropagation()\n\n        if (!isLocal) return\n\n        const TextInputBubble = () => (\n            <SpeechBubble className=\"centered no-pointer\">\n                <TextInput placeholder=\"Choose name\"\n                           submit={newName => {\n                               setLocalDisplayName(userId, newName)\n                               hidePopup()\n                           }}\n                           dismiss={hidePopup}/>\n            </SpeechBubble>\n        )\n\n        setPopup(<TextInputBubble/>)\n    }\n\n    const hidePopup = () => setPopup(null)\n\n    const onEmojiClick = e => {\n        e.stopPropagation()\n\n        if (!isLocal) return\n\n        setPopup(<EmojiSelection onSelection={hidePopup}/>)\n    }\n\n    const videoClassNames = classNames('user-display video person', {\n        'video_self': isLocal,\n        'remote_participant': !isLocal,\n        'no_video': !has_video || muted_video,\n        'no_audio': !has_audio || muted_audio,\n        'muted': !isAudioActive && !isLocal,\n        'dominant': isDominantSpeaker,\n        'local_muted': !isAudioActive && isLocal,\n        [`id_${userId}`]: true,\n        [`globalUID_${globalUID}`]: true\n    })\n\n    return (\n        <div className={videoClassNames} onClick={onClick}>\n            <div className=\"emoji\" onClick={onEmojiClick}>{emoji}</div>\n            <div className=\"id\" onClick={onNameClick}>{displayName}</div>\n            {bubbleMessage && (\n                <AutoHide ttl={7000} refreshKey={bubbleMessage.ts}>\n                    <SpeechBubble>{bubbleMessage.text}</SpeechBubble>\n                </AutoHide>\n            )}\n            <div className=\"in\"/>\n            {has_video && (\n                <video autoPlay=\"1\" ref={videoRef}/>\n            )}\n            {has_audio && (\n                <audio muted={isLocal || !isAudioActive} autoPlay=\"1\" ref={audioRef}/>\n            )}\n            {!_.isNil(popup) && (\n                <Popup onOutsideClick={hidePopup}>{popup}</Popup>\n            )}\n        </div>\n    )\n}\n\nexport default UserDisplay\n","import UserDisplay from './UserDisplay'\n\nexport default UserDisplay","import React, { useCallback } from 'react'\nimport _ from 'lodash'\nimport UserDisplay from './index'\n\nconst UserList = ({ users, isAudioActive }) => {\n\n  const renderUser = useCallback(user => (\n    <UserDisplay key={`user-display-${user.id}`} {...user} isAudioActive={isAudioActive}/>\n  ), [users])\n\n  return _.map(_.orderBy(users, 'id'), renderUser)\n}\n\nexport default UserList\n","import SideRoom from './SideRoom'\n\nexport default SideRoom","import React from 'react'\nimport _ from 'lodash'\nimport classNames from 'classnames'\nimport { useSelector } from 'react-redux'\nimport UserList from '../UserDisplay/UserList'\nimport { getLocalUser, getUsersByActiveRoom } from '../../store/users'\nimport { joinSideRoom } from '../../modules/meeting'\nimport './SideRoom.scss'\n\nexport default ({ name, maxSeats }) => {\n\n  const users = useSelector(getUsersByActiveRoom(name))\n  // console.warn('sideRoomUsers=' + JSON.stringify(users))\n\n  const userCount = _.size(users)\n  const emptySeatCount = maxSeats - userCount\n\n  const localUser = useSelector(getLocalUser)\n\n  const localUserInRoom = localUser.activeRoom === name\n\n  const onFreeSeatClick = () => {\n    !localUserInRoom && joinSideRoom(name)\n  }\n\n  return (\n    <div className=\"side-room\" onClick={e => e.stopPropagation()}>\n      <div className=\"bg\"/>\n      <UserList users={users} roomName={name} isAudioActive={localUserInRoom}/>\n      {_.map(Array(emptySeatCount), (o, i) => {\n        return (\n          <div className={classNames(\"user-display free-seat\")} onClick={onFreeSeatClick}>\n            <div className=\"id\">Speak up</div>\n            <div className=\"in\"/>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n","import YouTubePlayer from './YouTubePlayer'\n\nexport default YouTubePlayer","import React, { useEffect, useState } from 'react'\nimport YouTube from 'react-youtube'\n\n\nconst YouTubePlayer = ({volume, ...props}) => {\n\n  const [player, setPlayer] = useState(null)\n\n  useEffect(() => {\n    if (player) {\n      player.setVolume(volume)\n    }\n  }, [volume])\n\n  const onReady = e => {\n    setPlayer(e.target)\n    props.onReady && props.onReady(e)\n  }\n\n  return (\n    <YouTube {...props} onReady={onReady} />\n  )\n}\n\nexport default YouTubePlayer\n","import ChatMessage from \"./ChatMessage\";\n\nexport default ChatMessage\n","import React from 'react'\nimport './ChatMessage.scss'\nimport classNames from \"classnames\";\n\nconst nice_date = (date) => {\n    const hours_str = date.getHours().toString().padStart(2, 0)\n    const minutes_str = date.getMinutes().toString().padStart(2, 0)\n    return `${hours_str}:${minutes_str}`\n}\n\nconst ChatMessage = ({displayName, targetDisplayName, from_me, to_me, text, emoji, ts, recipient}) => {\n\n    const getFromText = (displayName) =>\n    {\n        if (to_me && (recipient !== \"public\"))\n        {\n            return `Private from ${displayName}`\n        }\n        return displayName\n    }\n\n    const getToText = (displayName) =>\n    {\n        if (from_me && (recipient !== \"public\"))\n        {\n            return `Private to ${displayName}`\n        }\n        return displayName\n    }\n\n    const messageClassNames = classNames('text-message', {\n        'private': recipient !== \"public\",\n        'public': recipient === \"public\",\n        'from_me': from_me,\n        'to_me': to_me\n    })\n\n    return (\n        <div className={messageClassNames}>\n            <span className=\"emoji\">{emoji}</span>\n            <span className=\"nick from\">{getFromText(displayName)}</span>\n            <span className=\"nick to\">{getToText(targetDisplayName)}</span>\n            <span className=\"msg-date\">({nice_date(ts)}) </span>\n            <span className=\"text\">{text}</span>\n        </div>\n    )\n}\n\nexport default ChatMessage\n","import ChatDrawer from './ChatDrawer'\n\nexport default ChatDrawer\n","import _ from 'lodash'\nimport React from 'react'\nimport './ChatDrawer.scss'\nimport {useSelector} from \"react-redux\";\nimport {getAllMessages} from \"../../store/messages\";\nimport ChatMessage from \"../ChatMessage\";\nimport {getLocalUser} from \"../../store/users\";\n\nconst ChatDrawer = ({}) => {\n\n    const all_messages = useSelector(getAllMessages)\n\n\n    return (\n        <div className=\"right-sidebar\">\n            {_.map(_.orderBy(all_messages, 'ts', 'desc'), (msg) => {\n                return (\n                    <ChatMessage key={msg.ts} ts={msg.ts} text={msg.text} displayName={msg.displayName}\n                                 targetDisplayName={msg.targetDisplayName} from_me={msg.from_me} to_me={msg.to_me}\n                                 emoji={msg.emoji} recipient={msg.recipient}/>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default ChatDrawer\n","import Room from './Room'\n\nexport default Room","import React from 'react'\nimport _ from 'lodash'\nimport classNames from 'classnames'\nimport {useSelector} from 'react-redux'\nimport {videoArtPlayerConfig} from '../../config/config.videos'\nimport {leaveSideRoom} from '../../modules/meeting'\nimport {getLocalUser, getUsersByActiveRoom} from '../../store/users'\nimport UserList from '../UserDisplay/UserList'\nimport SideRoom from '../SideRoom'\nimport YouTubePlayer from '../YouTubePlayer'\nimport './Room.scss'\nimport ChatDrawer from \"../ChatDrawer\";\n\nconst Room = ({roomName, withVideoArt}) => {\n\n    const room = useSelector(state => state.room)\n    const mainAreaUsers = useSelector(getUsersByActiveRoom('MAIN'))\n\n    const localUser = useSelector(getLocalUser)\n\n    if (_.isEmpty(localUser)) {\n        return null\n    }\n\n    const userInMainArea = localUser.activeRoom === 'MAIN'\n\n    const onMeetingAreaClick = () => {\n        !userInMainArea && leaveSideRoom(localUser.activeRoom)\n    }\n\n    return (\n        <div className={classNames('room', _.toLower(roomName))}>\n            <div className=\"bg\"/>\n            {withVideoArt && (\n                <div className=\"video-art-top\">\n                    <div className=\"big-video-container\">\n                        <YouTubePlayer {...videoArtPlayerConfig}/>\n                    </div>\n                </div>\n            )}\n            <div className=\"main-area\" onClick={onMeetingAreaClick}>\n                <UserList users={mainAreaUsers} roomName=\"MAIN\"/>\n                {_.map(room.sideRooms, (sideRoom, i) => (\n                    <SideRoom key={`side-room-${i}`} {...sideRoom}/>\n                ))}\n                <ChatDrawer/>\n            </div>\n        </div>\n    )\n}\n\nexport default Room\n","import BottomNav from './BottomNav'\n\nexport default BottomNav","import React from 'react'\nimport './BottomNav.scss'\nimport { onVideoMuteToggle, changeConference } from '../../modules/meeting'\nimport { ROOMS } from '../../consts'\nimport { useDispatch } from 'react-redux'\n\nconst BottomNav = ({ roomName }) => {\n\n    const dispatch = useDispatch()\n\n    const toggleFullscreen = () => {\n        if (!document.fullscreenElement) {\n            document.documentElement.requestFullscreen()\n        } else {\n            if (document.exitFullscreen) {\n                document.exitFullscreen()\n            }\n        }\n    }\n\n    const goToRoom = roomConfig => () => dispatch(changeConference(roomConfig))\n\n    return (\n        <div className=\"bottom-nav\">\n            {roomName !== 'block' && (\n                <div className=\"button button-to-block\" onClick={goToRoom(ROOMS.block)}/>\n            )}\n            {roomName !== 'toilet' && (\n                <div className=\"button button-to-toilet\" onClick={goToRoom(ROOMS.toilet)}/>\n            )}\n            <div className=\"button mute-toggle\" onClick={onVideoMuteToggle}/>\n            <div className=\"button fullscreen-toggle\" onClick={toggleFullscreen}/>\n        </div>\n    )\n}\n\nexport default BottomNav\n","import React from 'react'\nimport Room from './components/Room'\nimport BottomNav from './components/BottomNav'\nimport { playSoundtrack } from './config/config.dev'\nimport { soundtrackPlayerConfig } from './config/config.videos'\nimport { useSelector } from 'react-redux'\nimport { getLocalUser } from './store/users'\nimport YouTubePlayer from './components/YouTubePlayer'\nimport { getRoom } from './store/room'\n\nfunction App () {\n\n    const { roomName } = useSelector(getRoom)\n\n    const localUser = useSelector(getLocalUser)\n\n    const soundtrackVolume = localUser && localUser.activeRoom === 'MAIN' ? 100 : 40\n\n    return (\n        <div className=\"app\">\n            <Room roomName={roomName} withVideoArt={roomName === 'block'}/>\n            <BottomNav roomName={roomName}/>\n            {playSoundtrack && (\n                <YouTubePlayer {...soundtrackPlayerConfig} volume={soundtrackVolume}/>\n            )}\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { applyMiddleware, combineReducers, createStore, compose } from 'redux'\nimport logger from 'redux-logger'\nimport thunk from 'redux-thunk'\n// reducers\nimport roomReducer from './room'\nimport usersReducer from './users'\nimport messagesReducer from './messages'\n\nconst rootReducer = combineReducers({\n  users: usersReducer,\n  room: roomReducer,\n  messages: messagesReducer,\n})\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(\n    applyMiddleware(logger, thunk)\n  )\n)\n\nexport default store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './css/main.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\nimport { initJitsi, kickInterruptedConnections, unload } from './modules/meeting'\nimport store from './store'\n\n\n// init Jitsi\nwindow.JitsiMeetJS.setLogLevel(window.JitsiMeetJS.logLevels.ERROR)\n\ninitJitsi(store)\n\nsetInterval(kickInterruptedConnections, 5000);\n\n// TODO (ASAF) - check if both needed\nwindow.addEventListener(\"beforeunload\", unload)\nwindow.addEventListener(\"unload\", unload)\n\n// init React\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}