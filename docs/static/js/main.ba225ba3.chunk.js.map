{"version":3,"sources":["config/config.videos.js","utils.js","consts.js","store/room.js","store/users.js","store/messages.js","modules/meeting.js","hooks/useOutsideClick.js","components/Popup/index.js","components/Popup/Popup.js","components/AutoHide/index.js","components/AutoHide/AutoHide.js","components/EmojiSelection/index.js","components/EmojiSelection/EmojiSelection.js","components/SpeechBubble/index.js","components/SpeechBubble/SpeechBubble.js","components/UserDisplay/UserDisplay.js","components/UserDisplay/index.js","components/UserDisplay/UserList.js","components/SideRoom/index.js","components/SideRoom/SideRoom.js","components/YouTubePlayer/index.js","components/YouTubePlayer/YouTubePlayer.js","components/ChatMessage/index.js","components/ChatMessage/ChatMessage.js","components/ChatDrawer/index.js","components/ChatDrawer/ChatDrawer.js","components/Room/index.js","components/Room/Room.js","components/BottomNav/index.js","components/BottomNav/BottomNav.js","App.js","serviceWorker.js","store/index.js","index.js"],"names":["soundtrackPlayerConfig","id","containerClassName","videoId","options","playlist","width","height","playerVars","autoplay","controls","showinfo","modestbranding","loop","fs","cc_load_policy","iv_load_policy","autohide","disablekb","start","onReady","e","target","setVolume","playVideo","videoArtPlayerConfig","origin","makeReducer","actionHandlers","initialState","state","action","type","getFromLocalStorage","key","defaultValue","value","window","localStorage","getItem","getLocalTracks","JitsiConference","audio","getLocalAudioTrack","video","getLocalVideoTrack","getTracks","userId","isLocal","tracks","getParticipantById","_","find","t","getType","ROOMS","block","roomName","jitsiRoomName","sideRooms","toilet","name","maxSeats","initialRoom","location","href","indexOf","getRoom","room","roomReducer","SET_ROOM","payload","addUser","user","updateUser","update","getLocalUser","users","getUsersByActiveRoom","filter","u","activeRoom","reduceUpdateUser","usersReducer","ADD_USER","REMOVE_USER","omit","UPDATE_USER","ADD_REMOTE_USER_TRACK","trackType","isMuted","UPDATE_DOMINANT_SPEAKER","dominantUserId","console","warn","forEach","isDominantSpeaker","getAllMessages","messages","PUSH_MESSAGE","msg","DELETE_MESSAGE","m","connect","dispatch","getState","JitsiMeetJS","events","connection","CONNECTION_ESTABLISHED","CONNECTION_FAILED","CONNECTION_DISCONNECTED","JitsiConnection","jitsiConfig","onConnectionSuccess","roomConfig","joinConference","onConnectionFailed","error","addEventListener","disconnect","removeEventListener","undefined","JSON","stringify","initJitsiConference","conference","DISPLAY_NAME_CHANGED","MESSAGE_RECEIVED","CONFERENCE_JOINED","PRIVATE_MESSAGE_RECEIVED","USER_JOINED","TRACK_ADDED","TRACK_REMOVED","USER_LEFT","DOMINANT_SPEAKER_CHANGED","on","displayName","addCommandListener","attributes","emoji","text","ts","msg_object","parse","all_ids","getAllIds","from_me","to_me","recipient","Date","getTime","onConferenceJoined","onUserJoined","onRemoteTrackAdded","onRemoteTrackRemoved","onUserLeft","onSideRoomJoined","onSideRoomLeft","join","myUserId","push","setItem","setLocalDisplayName","setLocalEmoji","create_local_track_options","devices","cameraDeviceId","onLocalTracks","createLocalTracks","then","catch","in_tracks","map","local_track","getDeviceId","track","TRACK_MUTE_CHANGED","onTrackMuteChanged","setSenderVideoConstraint","unmute","mute","addTrack","hasTracks","setTimeout","getDisplayName","getParticipantId","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","deviceId","addRemoteUserTrack","containers","removeUser","to","onVideoMuteToggle","ownerEndpointId","setDisplayName","eventEmitter","emit","sendCommand","sendPrivateMessage","targetId","targetDisplayName","sendMessage","unload","each","dispose","leave","useOutsideClick","ref","callback","handleClick","current","contains","useEffect","document","Popup","children","className","onOutsideClick","useRef","classNames","AutoHide","refreshKey","ttl","useState","isVisible","setIsVisible","timer","clearTimeout","EmojiList","onSelection","localUser","useSelector","onEmojiClick","stopPropagation","EMOJIES","i","onClick","selected","SpeechBubble","attach","detachAndDispose","detach","UserDisplay","has_audio","has_video","muted_audio","muted_video","isAudioActive","videoRef","audioRef","videoTrack","setVideoTrack","audioTrack","setAudioTrack","popup","setPopup","bubbleMessage","last","getUserLastPublicMessage","hidePopup","videoClassNames","prompt","sendPublicMessage","newName","autoPlay","muted","isNil","UserList","renderUser","useCallback","orderBy","SideRoom","emptySeatCount","size","localUserInRoom","onFreeSeatClick","from","joinSideRoom","Array","o","YouTubePlayer","volume","props","player","setPlayer","ChatMessage","messageClassNames","getFromText","getToText","date","hours_str","getHours","toString","padStart","minutes_str","getMinutes","nice_date","ChatDrawer","all_messages","Room","withVideoArt","mainAreaUsers","isEmpty","userInMainArea","toLower","removeCommand","sendCommandOnce","leaveSideRoom","sideRoom","BottomNav","useDispatch","goToRoom","changeConference","fullscreenElement","exitFullscreen","documentElement","requestFullscreen","App","soundtrackVolume","playSoundtrack","Boolean","hostname","match","store","rootReducer","combineReducers","messagesReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","logger","thunk","setLogLevel","logLevels","ERROR","init","setInterval","participants","getParticipants","p","_connectionStatus","_id","kickParticipant","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ba225ba3.chunk.js","sourcesContent":["\nexport const soundtrackPlayerConfig = {\n  id: 'player-soundtrack',\n  containerClassName: 'player-soundtrack',\n  videoId: 'T92xtvU4WRc',\n  options: {\n    videoId: 'T92xtvU4WRc',\n    playlist: 'QtXx3Qubmys',\n    width: 1,               // Player width (in px)\n    height: 1,              // Player height (in px)\n    playerVars: {\n      autoplay: 1,        // Auto-play the video on load\n      controls: 0,        // Show pause/play buttons in player\n      showinfo: 0,        // Hide the video title\n      modestbranding: 1,  // Hide the Youtube Logo\n      loop: 1,            // Run the video in a loop\n      fs: 1,              // Hide the full screen button\n      cc_load_policy: 1, // Hide closed captions\n      iv_load_policy: 3,  // Hide the Video Annotations\n      autohide: 1,         // Hide video controls when playing,\n      disablekb: 1,\n      start: 100\n    },\n  },\n  onReady: e => {\n    e.target.setVolume(100)\n    e.target.playVideo()\n  }\n}\n\nexport const videoArtPlayerConfig = {\n  id: 'muteYouTubeVideoPlayer',\n  containerClassName: 'video-art-player',\n  videoId: '3V9bPvna3nM',\n  options: {\n    videoId: '3V9bPvna3nM', // YouTube Video ID\n    // width: 640, // Player width (in px)\n    // height: 480, // Player height (in px)\n    playerVars: {\n      autoplay: 1, // Auto-play the video on load\n      controls: 0, // Show pause/play buttons in player\n      showinfo: 0, // Hide the video title\n      modestbranding: 1, // Hide the Youtube Logo\n      loop: 1, // Run the video in a loop\n      fs: 0, // Hide the full screen button\n      cc_load_policy: 1, // Hide closed captions\n      iv_load_policy: 3, // Hide the Video Annotations\n      autohide: 1, // Hide video controls when playing,\n      disablekb: 1,\n      playlist: '3V9bPvna3nM', // for the loop\n      // start: offset,\n      origin: 'https://foosa-a977b5f6.localhost.run',\n    },\n  },\n  onReady: e => {\n    e.target.playVideo()\n  }\n}","import _ from 'lodash'\n\nexport const makeReducer = (actionHandlers, initialState) => {\n  return (state = initialState, action) => {\n    if (actionHandlers[action.type]) {\n      return actionHandlers[action.type](state, action)\n    }\n    return state\n  }\n}\n\nexport const getFromLocalStorage = (key, defaultValue) => {\n  let value = window.localStorage.getItem(key)\n  return !value || value === 'null' ? defaultValue : value\n}\n\nexport const getLocalTracks = () => {\n  if (!window.JitsiConference) return {}\n\n  return {\n    audio: window.JitsiConference.getLocalAudioTrack(),\n    video: window.JitsiConference.getLocalVideoTrack()\n  }\n}\n\nexport const getTracks = (userId, isLocal) => {\n  if (isLocal) return getLocalTracks()\n\n  const participant = window.JitsiConference.getParticipantById(userId)\n  const tracks = participant.getTracks()\n  // const types = _.map(tracks, t => t.getType())\n  // console.warn('remote tracks = ' + JSON.stringify(types))\n  return {\n    audio: _.find(tracks, t => t.getType() === 'audio'),\n    video: _.find(tracks, t => t.getType() === 'video'),\n  }\n}\n","export const ROOMS = {\n  block: {\n    roomName: 'block',\n    jitsiRoomName: 'block_demo_block',\n    sideRooms: [],\n  },\n  toilet: {\n    roomName: 'toilet',\n    jitsiRoomName: 'block_demo_toiletsss',\n    sideRooms: [{ name: 'second_room', maxSeats: 5 }],\n  }\n}","import { makeReducer } from '../utils'\nimport { ROOMS } from '../consts'\n\nconst initialRoom = window.location.href.indexOf('toilet') > -1 ? ROOMS.toilet : ROOMS.block\n\nexport const setRoom = room => ({\n  type: 'SET_ROOM',\n  payload: { room },\n})\n\nexport const getRoom = state => state.room\n\nconst roomReducer = makeReducer({\n  SET_ROOM: (state, action) => action.payload.room,\n}, initialRoom)\n\nexport default roomReducer","import _ from 'lodash'\nimport {makeReducer} from '../utils'\n\nexport const addUser = user => ({\n    type: 'ADD_USER',\n    payload: {user},\n})\n\nexport const removeUser = userId => ({\n    type: 'REMOVE_USER',\n    payload: {userId},\n})\n\nexport const updateUser = (userId, update) => ({\n    type: 'UPDATE_USER',\n    payload: {userId, update},\n})\n\nexport const addRemoteUserTrack = (userId, trackType, isMuted) => ({\n    type: 'ADD_REMOTE_USER_TRACK',\n    payload: {userId, trackType, isMuted},\n})\n\nexport const updateDominantSpeaker = userId => ({\n    type: 'UPDATE_DOMINANT_SPEAKER',\n    payload: {userId},\n})\n\nexport const getUser = userId => state => _.get(state.users, userId)\n\nexport const getLocalUser = state => _.find(state.users, {isLocal: true})\n\nexport const getRemoteUsers = state => _.pickBy(state.users, u => !u.isLocal)\n\nexport const getUsersByActiveRoom = roomName => state => _.filter(state.users, u => u.activeRoom === roomName)\n\nconst reduceUpdateUser = (state, user, update) => {\n    return {\n        ...state,\n        [user.id]: {\n            ...user,\n            ...update,\n        },\n    }\n}\n\nconst usersReducer = makeReducer({\n    ADD_USER: (state, action) => {\n        const {user} = action.payload\n        return {\n            ...state,\n            [user.id]: user\n        }\n    },\n    REMOVE_USER: (state, action) => {\n        const {userId} = action.payload\n        return _.omit(state, userId)\n    },\n    UPDATE_USER: (state, action) => {\n        const {userId, update} = action.payload\n        const user = state[userId] || {}\n\n        return reduceUpdateUser(state, user, update)\n    },\n    ADD_REMOTE_USER_TRACK: (state, action) => {\n        const {userId, trackType, isMuted} = action.payload\n        const user = state[userId] || {}\n\n        const update = {\n            [`has_${trackType}`]: true,\n            [`muted_${trackType}`]: isMuted\n        }\n\n        return reduceUpdateUser(state, user, update)\n    },\n    UPDATE_DOMINANT_SPEAKER: (state, action) => {\n        const dominantUserId = action.payload.userId\n\n\n        console.warn(\"UPDATE_DOMINANT_SPEAKER\", action)\n\n        _.forEach(state, (user) => {\n            user.isDominantSpeaker = (user.id === dominantUserId)\n        })\n\n        return state\n    }\n}, {})\n\nexport default usersReducer\n","import _ from 'lodash'\nimport { makeReducer } from '../utils'\n\nexport const pushMessage = (msg) => dispatch => {\n  const key = `${msg.id}-${(new Date()).getTime()}`\n\n  dispatch({\n    type: 'PUSH_MESSAGE',\n    payload: { msg },\n  })\n\n  // setTimeout(() => dispatch(deleteMessage(key)), 7000)\n}\n\nexport const deleteMessage = key => ({\n  type: 'DELETE_MESSAGE',\n  payload: { key },\n})\n\nexport const getUserMessages = userId => state => _.filter(state.messages, m => m.id === userId)\n\nexport const getUserLastPublicMessage = userId => state => _.last(\n    _.filter(state.messages, m => m.id === userId && m.recipient === 'public')\n)\n\nexport const getAllMessages = state => state.messages\n\nconst roomReducer = makeReducer({\n  PUSH_MESSAGE: (state, action) => {\n    return [...state, action.payload.msg]\n  },\n  DELETE_MESSAGE: (state, action) => {\n    return _.filter(state, m => m.key !== action.payload.key)\n  },\n}, [])\n\nexport default roomReducer\n","import _ from 'lodash'\nimport {getFromLocalStorage, getLocalTracks} from '../utils'\nimport {getRoom, setRoom} from '../store/room'\nimport {addUser, updateUser, addRemoteUserTrack, removeUser, updateDominantSpeaker} from '../store/users'\nimport {pushMessage} from '../store/messages'\nimport {jitsi as jitsiConfig} from '../config/config.dev'\n\nconst JOIN_MINI_CONFERENCE_CMD = 'JOIN_MINI_CONFERENCE'\nconst LEAVE_MINI_CONFERENCE_CMD = 'LEAVE_MINI_CONFERENCE'\nconst SET_EMOJI_CMD = 'SET_EMOJI'\nconst DEFAULT_EMOJI = '😷'\nconst DEFAULT_USERNAME = 'anonymous'\n\nexport const initJitsi = store => {\n    console.warn('initJitsi')\n\n    window.JitsiMeetJS.init(jitsiConfig)\n\n    connect(store)\n}\n\nconst connect = ({dispatch, getState}) => {\n    const {CONNECTION_ESTABLISHED, CONNECTION_FAILED, CONNECTION_DISCONNECTED} = window.JitsiMeetJS.events.connection\n\n    window.JitsiConnection = new window.JitsiMeetJS.JitsiConnection(null, null, jitsiConfig)\n\n    const onConnectionSuccess = () => {\n        console.warn('onConnectionSuccess')\n\n        const roomConfig = getRoom(getState())\n        joinConference(dispatch, roomConfig)\n    }\n\n    const onConnectionFailed = e => {\n        console.error('Connection Failed!', e)\n    }\n\n    const disconnect = () => {\n        window.JitsiConnection.removeEventListener(CONNECTION_ESTABLISHED, onConnectionSuccess)\n        window.JitsiConnection.removeEventListener(CONNECTION_FAILED, onConnectionFailed)\n        window.JitsiConnection.removeEventListener(CONNECTION_DISCONNECTED, disconnect)\n    }\n\n    // bind connection events\n    window.JitsiConnection.addEventListener(CONNECTION_ESTABLISHED, onConnectionSuccess)\n    window.JitsiConnection.addEventListener(CONNECTION_FAILED, onConnectionFailed)\n    window.JitsiConnection.addEventListener(CONNECTION_DISCONNECTED, disconnect)\n\n    window.JitsiConnection.connect(undefined)\n}\n\n/////////////////\n// ROOMS\n/////////////////\nconst joinConference = (dispatch, roomConfig) => {\n    if (!window.JitsiConnection) return\n\n    console.warn('roomConfig=' + JSON.stringify(roomConfig))\n\n    const JitsiConference = window.JitsiConnection.initJitsiConference(roomConfig.jitsiRoomName, jitsiConfig)\n\n    const {\n        DISPLAY_NAME_CHANGED, MESSAGE_RECEIVED, PRIVATE_MESSAGE_RECEIVED,\n        CONFERENCE_JOINED, USER_JOINED, TRACK_ADDED, TRACK_REMOVED, USER_LEFT,\n        DOMINANT_SPEAKER_CHANGED\n    } = window.JitsiMeetJS.events.conference\n\n    JitsiConference.on(DISPLAY_NAME_CHANGED, (id, displayName) => {\n        dispatch(updateUser(id, {displayName}))\n    })\n\n    JitsiConference.on(DOMINANT_SPEAKER_CHANGED, (id) => {\n        dispatch(updateDominantSpeaker(id))\n    })\n\n    JitsiConference.addCommandListener(SET_EMOJI_CMD, e => {\n        const userId = e.attributes['id']\n        const emoji = e.attributes['emoji']\n\n        console.warn(SET_EMOJI_CMD, userId, emoji)\n\n        dispatch(updateUser(userId, {emoji}))\n    })\n\n    JitsiConference.on(MESSAGE_RECEIVED, function (id, text, ts) {\n        // TODO(DROR): ts can be none here,\n        console.warn('MESSAGE_RECEIVED', id, text, ts)\n        const msg_object = JSON.parse(text)\n\n        const all_ids = getAllIds()\n        msg_object.from_me = (_.indexOf(all_ids, msg_object.id) > -1)\n        msg_object.to_me = (_.indexOf(all_ids, msg_object.recipient) > -1)\n\n        if (msg_object.from_me || msg_object.to_me || msg_object.recipient === \"public\") {\n            dispatch(pushMessage({\n                ...msg_object,\n                ts: ts ? new Date(Date.parse(ts)) : new Date(),  // ts is only sent when we refresh\n            }))\n        }\n\n    })\n\n    // JitsiConference.on(PRIVATE_MESSAGE_RECEIVED, function (id, text, ts) {\n    //     // TODO(DROR): ts can be none here,\n    //     console.warn('PRIVATE_MESSAGE_RECEIVED', id, text, ts)\n    //     dispatch(pushMessage({\n    //         text: text,\n    //         ts: new Date(), // as we have a different ID, we will never receive this...\n    //         recipient: 'me'\n    //     }))\n    // })\n\n    JitsiConference.on(CONFERENCE_JOINED, onConferenceJoined(dispatch))\n    JitsiConference.on(USER_JOINED, onUserJoined(dispatch))\n    JitsiConference.on(TRACK_ADDED, onRemoteTrackAdded(dispatch))\n    JitsiConference.on(TRACK_REMOVED, onRemoteTrackRemoved(dispatch))\n    JitsiConference.on(USER_LEFT, onUserLeft(dispatch))\n\n    JitsiConference.addCommandListener(JOIN_MINI_CONFERENCE_CMD, onSideRoomJoined(dispatch))\n    JitsiConference.addCommandListener(LEAVE_MINI_CONFERENCE_CMD, onSideRoomLeft(dispatch))\n\n    window.JitsiConference = JitsiConference\n\n    dispatch(setRoom(roomConfig))\n\n    JitsiConference.join()\n}\n\nexport const changeConference = roomConfig => dispatch => {\n    if (!window.JitsiConference) return\n\n    window.JitsiConference.leave()\n        .then(() => {\n            joinConference(dispatch, roomConfig)\n        })\n}\n\n/////////////////\n// LOCAL USER\nconst getAllIds = () => {\n    return JSON.parse(getFromLocalStorage(\"ALL_IDS\", '[]'));\n}\n\n/////////////////\nconst onConferenceJoined = dispatch => () => {\n    console.warn('onConferenceJoined')\n\n    const userId = window.JitsiConference.myUserId()\n\n    // small trick to achieve persistence\n    let all_ids = getAllIds()\n    all_ids.push(userId)\n    window.localStorage.setItem(\"ALL_IDS\", JSON.stringify(all_ids));\n\n    const displayName = getFromLocalStorage('DISPLAY_NAME', DEFAULT_USERNAME)\n    const emoji = getFromLocalStorage('EMOJI', DEFAULT_EMOJI)\n    // TODO(DROR): Remember camera state\n\n    dispatch(addUser({\n        id: userId,\n        isLocal: true,\n        displayName: displayName,\n        emoji: emoji,\n        activeRoom: 'MAIN',\n        all_ids: all_ids\n    }))\n\n    // Send the cached display_name and emoji to other participants\n    setLocalDisplayName(userId, displayName)\n    setLocalEmoji(emoji)\n\n    // We want to explicitly ask for the device we last used\n    // for dror for example, switching rooms selects the snap camera instead of the regular\n    // This fixes it\n    const create_local_track_options = {\n        devices: [\"video\", \"audio\"],\n        cameraDeviceId: getFromLocalStorage(\"video_device_id\", null),\n        onLocalTracks: getFromLocalStorage(\"audio_device_id\", null),\n    }\n\n    // Try to get audio/video. TODO(DROR): This might fail, we need the users's help\n    window.JitsiMeetJS.createLocalTracks(create_local_track_options)\n        .then(onLocalTracks(dispatch))\n        .catch((error) => {\n            throw error\n        })\n}\n\nconst onLocalTracks = dispatch => in_tracks => {\n\n    console.error(\"onLocalTracks\", in_tracks)\n\n    _.map(in_tracks, (local_track) => {\n\n        window.localStorage.setItem(`${local_track.getType()}_device_id`, local_track.getDeviceId())\n\n        local_track.addEventListener(\n            window.JitsiMeetJS.events.track.TRACK_MUTE_CHANGED,\n            onTrackMuteChanged(dispatch)\n        )\n\n        // Send lower quality video by default\n        window.JitsiConference.setSenderVideoConstraint(180)\n\n        if (local_track.getType() === 'video') {\n            const last_video_preference = getFromLocalStorage('SHOW_VIDEO', 'false')\n            if (last_video_preference === 'true') {\n                console.warn('unmuting video')\n                local_track.unmute()\n            } else {\n                local_track.mute()\n            }\n        } else {\n            // Always start with audio muted\n            local_track.mute().then(() => {\n                console.warn('audio muted...')\n            })\n        }\n\n        window.JitsiConference.addTrack(local_track).then(() => {\n\n            console.warn('FOO', local_track)\n\n            dispatch(updateUser(window.JitsiConference.myUserId(), {\n                hasTracks: true,\n                [`muted_${local_track.getType()}`]: local_track.isMuted(),\n                [`has_${local_track.getType()}`]: true\n            }))\n\n            // Send lower quality video by default, incase the first time didn't work\n            window.setTimeout(function () {\n                window.JitsiConference.setSenderVideoConstraint(180)\n            }, 1000)\n        })\n    })\n\n    dispatch(updateUser(window.JitsiConference.myUserId(), {hasTracks: true}))\n}\n\n/////////////////\n// REMOTE USERS\n/////////////////\nconst onUserJoined = dispatch => userId => {\n    const user = window.JitsiConference.getParticipantById(userId)\n    console.warn('onUserJoined', user)\n\n    dispatch(addUser({\n        id: userId,\n        activeRoom: 'MAIN',\n        displayName: user.getDisplayName()\n    }))\n}\n\nconst onRemoteTrackAdded = dispatch => track => {\n    if (track.isLocal()) {\n        window.JitsiConference.setSenderVideoConstraint(180)\n        return\n    }\n\n    console.warn('Remote TRACK_ADDED', track.getParticipantId(), track.isMuted(), track)\n\n    track.addEventListener(window.JitsiMeetJS.events.track.TRACK_MUTE_CHANGED, onTrackMuteChanged(dispatch))\n    track.addEventListener(window.JitsiMeetJS.events.track.LOCAL_TRACK_STOPPED, () =>\n        console.warn('remote track stoped')\n    )\n    track.addEventListener(\n        window.JitsiMeetJS.events.track.TRACK_AUDIO_OUTPUT_CHANGED,\n        (deviceId) =>\n            console.warn(`track audio output device was changed to ${deviceId}`)\n    )\n\n    const userId = track.getParticipantId()\n\n    dispatch(addRemoteUserTrack(userId, track.getType(), track.isMuted()))\n}\n\nconst onRemoteTrackRemoved = dispatch => track => {\n    if (track.isLocal()) {\n        return\n    }\n    console.warn('Remote TRACK_REMOVED', track, track.containers)\n\n    // const userId = track.getParticipantId()\n    // dispatch(removeRemoteTrack(userId, track))\n}\n\nconst onUserLeft = dispatch => userId => {\n    dispatch(removeUser(userId))\n}\n\n/////////////////\n// SIDE ROOMS\n/////////////////\nexport const joinSideRoom = roomName => {\n    const room = window.JitsiConference\n    if (!room) return\n\n    const userId = room.myUserId()\n\n    room.sendCommand(JOIN_MINI_CONFERENCE_CMD, {\n        attributes: {\n            from: userId,\n            to: roomName\n        }\n    })\n\n    // dispatch(updateUser(userId, { activeRoom: roomName }))\n}\n\nconst onSideRoomJoined = dispatch => e => {\n    const userId = e.attributes['from']\n    const to = e.attributes['to']\n\n    console.warn(JOIN_MINI_CONFERENCE_CMD, userId, to)\n\n    if (userId === window.JitsiConference.myUserId()) {\n        const {audio} = getLocalTracks()\n        if (audio) {\n            audio.unmute()\n        }\n    }\n\n    dispatch(updateUser(userId, {activeRoom: to}))\n}\n\nexport const leaveSideRoom = roomName => {\n    const room = window.JitsiConference\n    if (!room) return\n\n    room.removeCommand(JOIN_MINI_CONFERENCE_CMD)\n    room.sendCommandOnce(LEAVE_MINI_CONFERENCE_CMD, {\n        attributes: {\n            from: room.myUserId(),\n            to: roomName\n        }\n    })\n\n    // dispatch(updateUser(room.myUserId(), { activeRoom: 'MAIN' }))\n}\n\nconst onSideRoomLeft = dispatch => e => {\n    if (!window.JitsiConference) return\n\n    const userId = e.attributes['from']\n\n    console.warn(LEAVE_MINI_CONFERENCE_CMD, userId)\n\n    if (userId === window.JitsiConference.myUserId()) {\n        const {audio} = getLocalTracks()\n        audio && audio.mute()\n    }\n\n    dispatch(updateUser(userId, {activeRoom: 'MAIN'}))\n}\n\n//////////////////////\n// USER INTERACTIONS\n//////////////////////\nexport const onVideoMuteToggle = () => {\n    const {video} = getLocalTracks()\n    if (!video) {\n        return\n    }\n    if (video.isMuted()) {\n        video.unmute()\n        window.localStorage.setItem('SHOW_VIDEO', 'true')\n    } else {\n        video.mute()\n        window.localStorage.setItem('SHOW_VIDEO', 'false')\n    }\n}\n\nconst onTrackMuteChanged = dispatch => track => {\n    console.warn('TRACK_MUTE_CHANGED', track)\n\n    if (!track) {\n        return\n    }\n    const userId = track.ownerEndpointId ? track.ownerEndpointId : window.JitsiConference.myUserId()\n\n    dispatch(updateUser(userId, {\n        [`muted_${track.getType()}`]: track.isMuted()\n    }))\n\n}\n\nconst onLocalTrackMuteChanged = () => {\n}\n\nconst onLocalTrackStopped = () => {\n}\n\nconst OnLocalTrackAudioOutputChanged = () => {\n}\n\nexport const setLocalDisplayName = (userId, displayName) => {\n    if (!window.JitsiConference) return\n\n    console.warn('setLocalDisplayName')\n\n    // This will send the event name to other participants\n    window.JitsiConference.setDisplayName(displayName)\n\n    // Save this on localStorage\n    window.localStorage.setItem('DISPLAY_NAME', displayName)\n\n    // Because DISPLAY_NAME_CHANGED is not fired for local users, fire it\n    window.JitsiConference.eventEmitter.emit(window.JitsiMeetJS.events.conference.DISPLAY_NAME_CHANGED, userId, displayName)\n}\n\nexport const setLocalEmoji = (emoji) => {\n    if (!window.JitsiConference) return\n\n    // This will send the event name to other participants\n    window.JitsiConference.sendCommand(SET_EMOJI_CMD, {\n            attributes: {\n                'id': window.JitsiConference.myUserId(),\n                'emoji': emoji\n            }\n        }\n    )\n    window.localStorage.setItem('EMOJI', emoji)\n}\n\nexport const sendPublicMessage = (msg) => {\n    sendPrivateMessage(\"public\", msg);\n}\n\nexport const sendPrivateMessage = (targetId, msg) => {\n    if (!window.JitsiConference) return\n\n    // TODO(DROR,ASAF): Can we access the state here?\n    const userId = window.JitsiConference.myUserId()\n    const displayName = getFromLocalStorage('DISPLAY_NAME', DEFAULT_USERNAME)\n    const emoji = getFromLocalStorage('EMOJI', DEFAULT_EMOJI)\n\n\n    const targetDisplayName = targetId === \"public\" ? \"public\" : window.JitsiConference.getParticipantById(targetId).getDisplayName()\n\n    const msg_object = {\n        id: userId,\n        displayName: displayName,\n        targetDisplayName: targetDisplayName,\n        emoji: emoji,\n        recipient: targetId,\n        text: msg\n    }\n\n    window.JitsiConference.sendMessage(JSON.stringify(msg_object))\n}\n\n/////////////////\n// MISC\n/////////////////\nexport const kickInterruptedConnections = () => {\n    if (!window.JitsiConference) return\n\n    const participants = window.JitsiConference.getParticipants()\n    _.forEach(participants, p => {\n        if (p._connectionStatus === 'interrupted') {\n            console.warn('Kicking participant because of interrupted connection', p._id)\n            window.JitsiConference.kickParticipant(p._id)\n        }\n    })\n}\n\nexport const unload = () => {\n    if (!window.JitsiConference) return\n\n    _.each(window.JitsiConference.getLocalTracks(), track => track.dispose())\n    window.JitsiConference.leave()\n    window.connection.disconnect()\n}\n","import { useEffect } from 'react'\n\nconst useOutsideClick = (ref, callback) => {\n    const handleClick = e => {\n        if (ref.current && !ref.current.contains(e.target)) {\n            callback(e)\n        }\n    }\n    useEffect(() => {\n        document.addEventListener('click', handleClick)\n        return () => {\n            document.removeEventListener('click', handleClick)\n        }\n    })\n}\nexport default useOutsideClick","import Popup from './Popup'\n\nexport default Popup","import React, { useRef } from 'react'\nimport classNames from 'classnames'\nimport useOutsideClick from '../../hooks/useOutsideClick'\n\nconst Popup = ({ children, className, onOutsideClick }) => {\n\n    const ref = useRef(null)\n\n    useOutsideClick(ref, onOutsideClick)\n\n    return (\n        <div className={classNames('popup', className)} ref={ref}>\n            {children}\n        </div>\n    )\n}\n\nexport default Popup\n","import AutoHide from './AutoHide'\n\nexport default AutoHide","import React, { useEffect, useState } from 'react'\n\nconst AutoHide = ({ children, refreshKey, ttl = -1 }) => {\n\n    const [isVisible, setIsVisible] = useState(true)\n\n    useEffect(() => {\n        if (ttl > -1) {\n            setIsVisible(true)\n            const timer = setTimeout(() => {\n                setIsVisible(false)\n            }, ttl)\n            return () => clearTimeout(timer)\n        }\n    }, [refreshKey])\n\n    return isVisible && children\n}\n\nexport default AutoHide\n","import EmojiList from './EmojiSelection'\n\nexport default EmojiList","import React from 'react'\nimport _ from 'lodash'\nimport classNames from 'classnames'\nimport { useSelector } from 'react-redux'\nimport { getLocalUser } from '../../store/users'\nimport { setLocalEmoji } from '../../modules/meeting'\nimport EMOJIES from '../../config/config.emoji'\nimport './EmojiSelection.scss'\n\nconst EmojiSelection = ({ onSelection }) => {\n\n    const localUser = useSelector(getLocalUser)\n\n    const onEmojiClick = emoji => e => {\n        e.stopPropagation()\n\n        if (emoji === localUser.emoji) return\n\n        setLocalEmoji(emoji)\n        onSelection && onSelection(emoji)\n    }\n\n    return (\n        <div className=\"emoji-selection\">\n            {_.map(EMOJIES, (emoji, i) => (\n                <div key={`emoji-${i}`} onClick={onEmojiClick(emoji)}\n                     className={classNames('emoji-item', { selected: emoji === localUser.emoji })}>{emoji}</div>\n            ))}\n        </div>\n    )\n}\n\nexport default EmojiSelection\n","import SpeechBubble from './SpeechBubble'\n\nexport default SpeechBubble","import React from 'react'\nimport './SpeechBubble.scss'\n\nconst SpeechBubble = ({ children }) => {\n    return (\n        <div className=\"bubble-wrapper\">\n            <div className=\"speech-bubble\">{children}</div>\n        </div>\n    )\n}\n\nexport default SpeechBubble\n","import React, { useEffect, useRef, useState } from 'react'\nimport _ from 'lodash'\nimport { getTracks } from '../../utils'\nimport { sendPrivateMessage, sendPublicMessage, setLocalDisplayName } from '../../modules/meeting'\nimport { getUserLastPublicMessage } from '../../store/messages'\nimport classNames from 'classnames'\nimport './UserDisplay.scss'\nimport { useSelector } from 'react-redux'\nimport Popup from '../Popup'\nimport AutoHide from '../AutoHide'\nimport EmojiSelection from '../EmojiSelection'\nimport SpeechBubble from '../SpeechBubble'\n\nconst attach = (track, ref) => track && ref.current && track.attach(ref.current)\n\nconst detachAndDispose = (track, ref) => {\n    if (track && ref.current) {\n        track.detach(ref.current)\n        track.dispose()\n    }\n}\n\nconst UserDisplay = ({ id: userId, isLocal, has_audio, has_video, muted_audio, muted_video, displayName, emoji, isAudioActive, isDominantSpeaker }) => {\n\n    const videoRef = useRef(null)\n    const audioRef = useRef(null)\n\n    const [videoTrack, setVideoTrack] = useState(null)\n    const [audioTrack, setAudioTrack] = useState(null)\n\n    const [popup, setPopup] = useState(null)\n\n    const bubbleMessage = useSelector(getUserLastPublicMessage(userId))\n\n    useEffect(() => {\n\n        if (has_video) {\n            const { video } = getTracks(userId, isLocal)\n            attach(video, videoRef)\n            setVideoTrack(video)\n        }\n\n        return () => {\n            if (has_audio || has_video) {\n                detachAndDispose(videoTrack, videoRef)\n            }\n        }\n    }, [has_video, videoRef])\n\n    useEffect(() => {\n\n        if (has_audio) {\n            const { audio } = getTracks(userId, isLocal)\n            attach(audio, audioRef)\n            setAudioTrack(audio)\n        }\n\n        return () => {\n            if (has_audio) {\n                detachAndDispose(audioTrack, audioRef)\n            }\n        }\n    }, [has_audio, audioRef])\n\n    const onClick = e => {\n        e.stopPropagation()\n\n        if (isLocal) {\n            //send public message\n            const msg = window.prompt('Say something:')\n            if (msg) {\n                sendPublicMessage(msg)\n            }\n        } else {\n            // send private message\n            const msg = window.prompt(`Say something to ${displayName}:`)\n            if (msg) {\n                sendPrivateMessage(userId, msg)\n            }\n        }\n\n    }\n\n    const onNameClick = e => {\n        e.stopPropagation()\n\n        if (!isLocal) return\n\n        const newName = window.prompt('Display Name???')\n        if (newName) {\n            setLocalDisplayName(userId, newName)\n        }\n    }\n\n    const hidePopup = () => setPopup(null)\n\n    const onEmojiClick = e => {\n        e.stopPropagation()\n\n        if (!isLocal) return\n\n        setPopup(<EmojiSelection onSelection={hidePopup}/>)\n    }\n\n    const videoClassNames = classNames('user-display video person', {\n        'video_self': isLocal,\n        'remote_participant': !isLocal,\n        'no_video': !has_video || muted_video,\n        'no_audio': !has_audio || muted_audio,\n        'muted': !isAudioActive && !isLocal,\n        'dominant': isDominantSpeaker,\n        'local_muted': !isAudioActive && isLocal,\n    })\n\n    return (\n        <div className={videoClassNames} onClick={onClick}>\n            <div className=\"emoji\" onClick={onEmojiClick}>{emoji}</div>\n            <div className=\"id\" onClick={onNameClick}>{displayName} {userId}</div>\n            {bubbleMessage && (\n                <AutoHide ttl={7000} refreshKey={bubbleMessage.ts}>\n                    <SpeechBubble>{bubbleMessage.text}</SpeechBubble>\n                </AutoHide>\n            )}\n            <div className=\"in\"/>\n            {has_video && (\n                <video autoPlay=\"1\" ref={videoRef}/>\n            )}\n            {has_audio && (\n                <audio muted={isLocal || !isAudioActive} autoPlay=\"1\" ref={audioRef}/>\n            )}\n            {!_.isNil(popup) && (\n                <Popup onOutsideClick={hidePopup}>{popup}</Popup>\n            )}\n        </div>\n    )\n}\n\nexport default UserDisplay\n","import UserDisplay from './UserDisplay'\n\nexport default UserDisplay","import React, { useCallback } from 'react'\nimport _ from 'lodash'\nimport UserDisplay from './index'\n\nconst UserList = ({ users, isAudioActive }) => {\n\n  const renderUser = useCallback(user => (\n    <UserDisplay key={`user-display-${user.id}`} {...user} isAudioActive={isAudioActive}/>\n  ), [users])\n\n  return _.map(_.orderBy(users, 'id'), renderUser)\n}\n\nexport default UserList\n","import SideRoom from './SideRoom'\n\nexport default SideRoom","import React from 'react'\nimport _ from 'lodash'\nimport classNames from 'classnames'\nimport { useSelector } from 'react-redux'\nimport UserList from '../UserDisplay/UserList'\nimport { getLocalUser, getUsersByActiveRoom } from '../../store/users'\nimport { joinSideRoom } from '../../modules/meeting'\nimport './SideRoom.scss'\n\nexport default ({ name, maxSeats }) => {\n\n  const users = useSelector(getUsersByActiveRoom(name))\n  // console.warn('sideRoomUsers=' + JSON.stringify(users))\n\n  const userCount = _.size(users)\n  const emptySeatCount = maxSeats - userCount\n\n  const localUser = useSelector(getLocalUser)\n\n  const localUserInRoom = localUser.activeRoom === name\n\n  const onFreeSeatClick = () => {\n    !localUserInRoom && joinSideRoom(name)\n  }\n\n  return (\n    <div className=\"side-room\" onClick={e => e.stopPropagation()}>\n      <div className=\"bg\"/>\n      <UserList users={users} roomName={name} isAudioActive={localUserInRoom}/>\n      {_.map(Array(emptySeatCount), (o, i) => {\n        return (\n          <div className={classNames(\"user-display free-seat\")} onClick={onFreeSeatClick}>\n            <div className=\"id\">Speak up</div>\n            <div className=\"in\"/>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n","import YouTubePlayer from './YouTubePlayer'\n\nexport default YouTubePlayer","import React, { useEffect, useState } from 'react'\nimport YouTube from 'react-youtube'\n\n\nconst YouTubePlayer = ({volume, ...props}) => {\n\n  const [player, setPlayer] = useState(null)\n\n  useEffect(() => {\n    if (player) {\n      player.setVolume(volume)\n    }\n  }, [volume])\n\n  const onReady = e => {\n    setPlayer(e.target)\n    props.onReady && props.onReady(e)\n  }\n\n  return (\n    <YouTube {...props} onReady={onReady} />\n  )\n}\n\nexport default YouTubePlayer\n","import ChatMessage from \"./ChatMessage\";\n\nexport default ChatMessage\n","import React from 'react'\nimport './ChatMessage.scss'\nimport classNames from \"classnames\";\n\nconst nice_date = (date) => {\n    const hours_str = date.getHours().toString().padStart(2, 0)\n    const minutes_str = date.getMinutes().toString().padStart(2, 0)\n    return `${hours_str}:${minutes_str}`\n}\n\nconst ChatMessage = ({displayName, targetDisplayName, from_me, to_me, text, emoji, ts, recipient}) => {\n\n    const getFromText = (displayName) =>\n    {\n        if (to_me && (recipient !== \"public\"))\n        {\n            return `Private from ${displayName}`\n        }\n        return displayName\n    }\n\n    const getToText = (displayName) =>\n    {\n        if (from_me && (recipient !== \"public\"))\n        {\n            return `Private to ${displayName}`\n        }\n        return displayName\n    }\n\n    const messageClassNames = classNames('text-message', {\n        'private': recipient !== \"public\",\n        'public': recipient === \"public\",\n        'from_me': from_me,\n        'to_me': to_me\n    })\n\n    return (\n        <div className={messageClassNames}>\n            <span className=\"emoji\">{emoji}</span>\n            <span className=\"nick from\">{getFromText(displayName)}</span>\n            <span className=\"nick to\">{getToText(targetDisplayName)}</span>\n            <span className=\"msg-date\">({nice_date(ts)}) </span>\n            <span className=\"text\">{text}</span>\n        </div>\n    )\n}\n\nexport default ChatMessage\n","import ChatDrawer from './ChatDrawer'\n\nexport default ChatDrawer\n","import _ from 'lodash'\nimport React from 'react'\nimport './ChatDrawer.scss'\nimport {useSelector} from \"react-redux\";\nimport {getAllMessages} from \"../../store/messages\";\nimport ChatMessage from \"../ChatMessage\";\nimport {getLocalUser} from \"../../store/users\";\n\nconst ChatDrawer = ({}) => {\n\n    const all_messages = useSelector(getAllMessages)\n\n\n    return (\n        <div className=\"right-sidebar\">\n            {_.map(_.orderBy(all_messages, 'ts', 'desc'), (msg) => {\n                return (\n                    <ChatMessage key={msg.ts} ts={msg.ts} text={msg.text} displayName={msg.displayName}\n                                 targetDisplayName={msg.targetDisplayName} from_me={msg.from_me} to_me={msg.to_me}\n                                 emoji={msg.emoji} recipient={msg.recipient}/>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default ChatDrawer\n","import Room from './Room'\n\nexport default Room","import React from 'react'\nimport _ from 'lodash'\nimport classNames from 'classnames'\nimport {useSelector} from 'react-redux'\nimport {videoArtPlayerConfig} from '../../config/config.videos'\nimport {leaveSideRoom} from '../../modules/meeting'\nimport {getLocalUser, getUsersByActiveRoom} from '../../store/users'\nimport UserList from '../UserDisplay/UserList'\nimport SideRoom from '../SideRoom'\nimport YouTubePlayer from '../YouTubePlayer'\nimport './Room.scss'\nimport ChatDrawer from \"../ChatDrawer\";\n\nconst Room = ({roomName, withVideoArt}) => {\n\n    const room = useSelector(state => state.room)\n    const mainAreaUsers = useSelector(getUsersByActiveRoom('MAIN'))\n\n    const localUser = useSelector(getLocalUser)\n\n    if (_.isEmpty(localUser)) {\n        return null\n    }\n\n    const userInMainArea = localUser.activeRoom === 'MAIN'\n\n    const onMeetingAreaClick = () => {\n        !userInMainArea && leaveSideRoom(localUser.activeRoom)\n    }\n\n    return (\n        <div className={classNames('room', _.toLower(roomName))}>\n            <div className=\"bg\"/>\n            {withVideoArt && (\n                <div className=\"video-art-top\">\n                    <div className=\"big-video-container\">\n                        <YouTubePlayer {...videoArtPlayerConfig}/>\n                    </div>\n                </div>\n            )}\n            <div className=\"main-area\" onClick={onMeetingAreaClick}>\n                <UserList users={mainAreaUsers} roomName=\"MAIN\"/>\n                {_.map(room.sideRooms, (sideRoom, i) => (\n                    <SideRoom key={`side-room-${i}`} {...sideRoom}/>\n                ))}\n                <ChatDrawer/>\n            </div>\n        </div>\n    )\n}\n\nexport default Room\n","import BottomNav from './BottomNav'\n\nexport default BottomNav","import React from 'react'\nimport './BottomNav.scss'\nimport { onVideoMuteToggle, changeConference } from '../../modules/meeting'\nimport { ROOMS } from '../../consts'\nimport { useDispatch } from 'react-redux'\n\nconst BottomNav = ({ roomName }) => {\n\n    const dispatch = useDispatch()\n\n    const toggleFullscreen = () => {\n        if (!document.fullscreenElement) {\n            document.documentElement.requestFullscreen()\n        } else {\n            if (document.exitFullscreen) {\n                document.exitFullscreen()\n            }\n        }\n    }\n\n    const goToRoom = roomConfig => () => dispatch(changeConference(roomConfig))\n\n    return (\n        <div className=\"bottom-nav\">\n            {roomName !== 'block' && (\n                <div className=\"button button-to-block\" onClick={goToRoom(ROOMS.block)}/>\n            )}\n            {roomName !== 'toilet' && (\n                <div className=\"button button-to-toilet\" onClick={goToRoom(ROOMS.toilet)}/>\n            )}\n            <div className=\"button mute-toggle\" onClick={onVideoMuteToggle}/>\n            <div className=\"button fullscreen-toggle\" onClick={toggleFullscreen}/>\n        </div>\n    )\n}\n\nexport default BottomNav\n","import React from 'react'\nimport Room from './components/Room'\nimport BottomNav from './components/BottomNav'\nimport { playSoundtrack } from './config/config.dev'\nimport { soundtrackPlayerConfig } from './config/config.videos'\nimport { useSelector } from 'react-redux'\nimport { getLocalUser } from './store/users'\nimport YouTubePlayer from './components/YouTubePlayer'\nimport { getRoom } from './store/room'\n\nfunction App () {\n\n    const { roomName } = useSelector(getRoom)\n\n    const localUser = useSelector(getLocalUser)\n\n    const soundtrackVolume = localUser && localUser.activeRoom === 'MAIN' ? 100 : 40\n\n    return (\n        <div className=\"app\">\n            <Room roomName={roomName} withVideoArt={roomName === 'block'}/>\n            <BottomNav roomName={roomName}/>\n            {playSoundtrack && (\n                <YouTubePlayer {...soundtrackPlayerConfig} volume={soundtrackVolume}/>\n            )}\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { applyMiddleware, combineReducers, createStore, compose } from 'redux'\nimport logger from 'redux-logger'\nimport thunk from 'redux-thunk'\n// reducers\nimport roomReducer from './room'\nimport usersReducer from './users'\nimport messagesReducer from './messages'\n\nconst rootReducer = combineReducers({\n  users: usersReducer,\n  room: roomReducer,\n  messages: messagesReducer,\n})\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(\n    applyMiddleware(logger, thunk)\n  )\n)\n\nexport default store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './css/main.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\nimport { initJitsi, kickInterruptedConnections, unload } from './modules/meeting'\nimport store from './store'\n\n\n// init Jitsi\nwindow.JitsiMeetJS.setLogLevel(window.JitsiMeetJS.logLevels.ERROR)\n\ninitJitsi(store)\n\nsetInterval(kickInterruptedConnections, 5000);\n\n// TODO (ASAF) - check if both needed\nwindow.addEventListener(\"beforeunload\", unload)\nwindow.addEventListener(\"unload\", unload)\n\n// init React\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}