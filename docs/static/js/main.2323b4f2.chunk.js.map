{"version":3,"sources":["config/config.videos.js","utils.js","consts.js","store/room.js","store/users.js","store/messages.js","store/devices.js","modules/meeting.js","hooks/useOutsideClick.js","components/Popup/index.js","components/Popup/Popup.js","components/AutoHide/index.js","components/AutoHide/AutoHide.js","components/EmojiSelection/index.js","components/EmojiSelection/EmojiSelection.js","components/SpeechBubble/index.js","components/SpeechBubble/SpeechBubble.js","components/TextInput/index.js","components/TextInput/TextInput.js","components/UserDisplay/UserDisplay.js","components/UserDisplay/index.js","components/UserDisplay/UserList.js","components/SideRoom/index.js","components/SideRoom/SideRoom.js","components/YouTubePlayer/index.js","components/YouTubePlayer/YouTubePlayer.js","components/ChatMessage/index.js","components/ChatMessage/ChatMessage.js","components/ChatDrawer/index.js","components/ChatDrawer/ChatDrawer.js","components/Room/index.js","components/Room/Room.js","components/Options/options.js","components/BottomNav/index.js","components/BottomNav/BottomNav.js","App.js","serviceWorker.js","store/index.js","index.js"],"names":["soundtrackPlayerConfig","id","containerClassName","videoId","options","playlist","width","height","playerVars","autoplay","controls","showinfo","modestbranding","loop","fs","cc_load_policy","iv_load_policy","autohide","disablekb","start","onReady","e","target","setVolume","playVideo","videoArtPlayerConfig","onEnd","console","error","seekTo","makeReducer","actionHandlers","initialState","state","action","type","getFromLocalStorage","key","defaultValue","value","window","localStorage","getItem","getLocalTracks","JitsiConference","audio","getLocalAudioTrack","video","getLocalVideoTrack","getTracks","userId","isLocal","tracks","getParticipantById","_","find","t","getType","ROOMS","block","roomName","jitsiRoomName","sideRooms","toilet","name","maxSeats","setRoom","room","setItem","payload","getRoom","roomReducer","SET_ROOM","addUser","user","updateUser","update","getLocalUser","users","getUsersByActiveRoom","filter","u","activeRoom","reduceUpdateUser","usersReducer","ADD_USER","REMOVE_USER","omit","UPDATE_USER","ADD_REMOTE_USER_TRACK","trackType","isMuted","UPDATE_DOMINANT_SPEAKER","dominantUserId","warn","forEach","isDominantSpeaker","getAllMessages","messages","messagesReducer","PUSH_MESSAGE","msg","DELETE_ALL_MESSAGES","DELETE_MESSAGE","m","getInputDevices","devices","devicesReducer","SET_INPUT_DEVICE","new_state","audio_input_id","video_input_id","SET_AVAILABLE_INPUT_DEVICES","audio_inputs","video_inputs","connect","dispatch","getState","JitsiMeetJS","events","connection","CONNECTION_ESTABLISHED","CONNECTION_FAILED","CONNECTION_DISCONNECTED","JitsiConnection","jitsiConfig","onConnectionSuccess","roomConfig","joinConference","onConnectionFailed","addEventListener","disconnect","removeEventListener","undefined","JSON","stringify","initJitsiConference","conference","DISPLAY_NAME_CHANGED","MESSAGE_RECEIVED","CONFERENCE_JOINED","PRIVATE_MESSAGE_RECEIVED","USER_JOINED","TRACK_ADDED","TRACK_REMOVED","USER_LEFT","DOMINANT_SPEAKER_CHANGED","on","displayName","addCommandListener","attributes","emoji","conference_id","globalUID","text","ts","msg_object","parse","from_me","to_me","recipient","Date","getTime","onConferenceJoined","onUserJoined","onRemoteTrackAdded","onRemoteTrackRemoved","onUserLeft","onSideRoomJoined","onSideRoomLeft","join","myUserId","length","chars","result","i","Math","floor","random","randomString","setLocalDisplayName","setLocalEmoji","setGlobalUID","create_local_track_options","cameraDeviceId","micDeviceId","constraints","createLocalTracks","then","onLocalTracks","catch","in_tracks","mediaDevices","isDeviceListAvailable","enumerateDevices","d","kind","setAvailableInputDevices","map","local_track","getDeviceId","track","TRACK_MUTE_CHANGED","onTrackMuteChanged","setSenderVideoConstraint","unmute","mute","addTrack","hasTracks","setTimeout","getDisplayName","getParticipantId","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","deviceId","addRemoteUserTrack","containers","removeUser","to","onVideoMuteToggle","ownerEndpointId","setDisplayName","eventEmitter","emit","sendCommand","sendPublicMessage","sendPrivateMessage","targetGlobalUID","targetDisplayName","sendMessage","unload","each","dispose","leave","useOutsideClick","ref","callback","handleClick","current","contains","useEffect","document","Popup","children","className","onOutsideClick","useRef","classNames","AutoHide","refreshKey","ttl","hidden","useState","isVisible","setIsVisible","timer","clearTimeout","EmojiList","onSelection","localUser","useSelector","onEmojiClick","stopPropagation","EMOJIES","onClick","selected","SpeechBubble","ChatInput","submit","dismiss","focus","innerRef","html","onChange","onKeyPress","isEmpty","charCode","onKeyDown","keyCode","attach","detachAndDispose","detach","UserDisplay","has_audio","has_video","muted_audio","muted_video","isAudioActive","videoRef","audioRef","videoTrack","setVideoTrack","audioTrack","setAudioTrack","popup","setPopup","bubbleMessage","localUserGlobalUID","last","ts_diff_secs","abs","getUserLastMessage","lastMessageFromLocalUser","getLastMessageFromLocalUser","renderInputBubble","placeholder","onHeightChange","hidePopup","videoClassNames","popupOpen","isNil","shiftKey","newName","autoPlay","muted","UserList","renderUser","useCallback","orderBy","SideRoom","emptySeatCount","size","localUserInRoom","onFreeSeatClick","from","joinSideRoom","Array","o","YouTubePlayer","volume","props","player","setPlayer","ChatMessage","messageClassNames","getFromText","getToText","date","hours_str","getHours","toString","padStart","minutes_str","getMinutes","nice_date","ChatDrawer","all_messages","toISOString","concat","Room","withVideoArt","mainAreaUsers","userInMainArea","toLower","removeCommand","sendCommandOnce","leaveSideRoom","sideRoom","MediaOption","input","local_input_id","useDispatch","inputClassNames","isDeviceChangeAvailable","removeTrack","switchInput","label","Options","style","audio_input","video_input","BottomNav","goToRoom","changeConference","fullscreenElement","exitFullscreen","documentElement","requestFullscreen","App","soundtrackVolume","playSoundtrack","Boolean","location","hostname","match","store","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","logger","thunk","setLogLevel","logLevels","ERROR","URLSearchParams","search","get","setInitialRoom","init","setInterval","participants","getParticipants","p","_connectionStatus","_id","kickParticipant","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2323b4f2.chunk.js","sourcesContent":["export const soundtrackPlayerConfig = {\n    id: 'player-soundtrack',\n    containerClassName: 'player-soundtrack',\n    videoId: 'T92xtvU4WRc',\n    options: {\n        videoId: 'T92xtvU4WRc',\n        playlist: 'QtXx3Qubmys',\n        width: 1,               // Player width (in px)\n        height: 1,              // Player height (in px)\n        playerVars: {\n            autoplay: 1,        // Auto-play the video on load\n            controls: 0,        // Show pause/play buttons in player\n            showinfo: 0,        // Hide the video title\n            modestbranding: 1,  // Hide the Youtube Logo\n            loop: 1,            // Run the video in a loop\n            fs: 1,              // Hide the full screen button\n            cc_load_policy: 1, // Hide closed captions\n            iv_load_policy: 3,  // Hide the Video Annotations\n            autohide: 1,         // Hide video controls when playing,\n            disablekb: 1,\n            start: 100\n        },\n    },\n    onReady: e => {\n        e.target.setVolume(100)\n        e.target.playVideo()\n    }\n}\n\nexport const videoArtPlayerConfig = {\n    id: 'muteYouTubeVideoPlayer',\n    containerClassName: 'video-art-player',\n    videoId: 'm6cy9PqMgIk',\n    options: {\n        videoId: 'm6cy9PqMgIk', // YouTube Video ID\n        // width: 640, // Player width (in px)\n        // height: 480, // Player height (in px)\n        playerVars: {\n            autoplay: 1, // Auto-play the video on load\n            controls: 0, // Show pause/play buttons in player\n            showinfo: 0, // Hide the video title\n            modestbranding: 1, // Hide the Youtube Logo\n            loop: 1, // Run the video in a loop\n            fs: 0, // Hide the full screen button\n            cc_load_policy: 1, // Hide closed captions\n            iv_load_policy: 3, // Hide the Video Annotations\n            autohide: 1, // Hide video controls when playing,\n            disablekb: 1,\n            playlist: 'm6cy9PqMgIk', // for the loop\n            // start: 60,\n            // origin: 'https://foosa-a977b5f6.localhost.run',\n        },\n    },\n    onReady: e => {\n        e.target.playVideo()\n    },\n    onEnd: e => {\n        console.error(\"onEnd\")\n        e.target.seekTo(0)\n    }\n}\n","import _ from 'lodash'\n\nexport const makeReducer = (actionHandlers, initialState) => {\n    return (state = initialState, action) => {\n        if (actionHandlers[action.type]) {\n            return actionHandlers[action.type](state, action)\n        }\n        return state\n    }\n}\n\nexport const getFromLocalStorage = (key, defaultValue) => {\n    let value = window.localStorage.getItem(key)\n    return !value || value === 'null' ? defaultValue : value\n}\n\nexport const getLocalTracks = () => {\n    if (!window.JitsiConference) return {}\n\n    return {\n        audio: window.JitsiConference.getLocalAudioTrack(),\n        video: window.JitsiConference.getLocalVideoTrack()\n    }\n}\n\nexport const getTracks = (userId, isLocal) => {\n    if (isLocal) return getLocalTracks()\n\n    const participant = window.JitsiConference.getParticipantById(userId)\n    const tracks = participant.getTracks()\n    // const types = _.map(tracks, t => t.getType())\n    // console.warn('remote tracks = ' + JSON.stringify(types))\n    return {\n        audio: _.find(tracks, t => t.getType() === 'audio'),\n        video: _.find(tracks, t => t.getType() === 'video'),\n    }\n}\n\n\nexport const randomString = (length) => {\n    const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    let result = '';\n    for (let i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}\n","export const ROOMS = {\n  block: {\n    roomName: 'block',\n    jitsiRoomName: 'block_demo_block',\n    sideRooms: [],\n  },\n  toilet: {\n    roomName: 'toilet',\n    jitsiRoomName: 'block_demo_toiletsss',\n    sideRooms: [{ name: 'second_room', maxSeats: 5 }],\n  }\n}\n","import { makeReducer, getFromLocalStorage } from '../utils'\nimport { ROOMS } from '../consts'\n\nexport const setInitialRoom = () => {\n    // try url param\n    const urlParams = new URLSearchParams(window.location.search)\n    let roomName = urlParams.get('room')\n    if (!roomName) {\n        // try local storage\n        roomName = getFromLocalStorage('ROOM_NAME')\n    }\n    if (!roomName) {\n      // set default\n        roomName = 'block'\n    }\n\n    return setRoom(ROOMS[roomName])\n}\n\nexport const setRoom = room => {\n    window.localStorage.setItem('ROOM_NAME', room.roomName)\n    return {\n        type: 'SET_ROOM',\n        payload: { room },\n    }\n}\n\nexport const getRoom = state => state.room\n\nconst roomReducer = makeReducer({\n    SET_ROOM: (state, action) => action.payload.room,\n}, {})\n\nexport default roomReducer","import _ from 'lodash'\nimport {makeReducer} from '../utils'\n\nexport const addUser = user => ({\n    type: 'ADD_USER',\n    payload: {user},\n})\n\nexport const removeUser = userId => ({\n    type: 'REMOVE_USER',\n    payload: {userId},\n})\n\nexport const updateUser = (userId, update) => ({\n    type: 'UPDATE_USER',\n    payload: {userId, update},\n})\n\nexport const addRemoteUserTrack = (userId, trackType, isMuted) => ({\n    type: 'ADD_REMOTE_USER_TRACK',\n    payload: {userId, trackType, isMuted},\n})\n\nexport const updateDominantSpeaker = userId => ({\n    type: 'UPDATE_DOMINANT_SPEAKER',\n    payload: {userId},\n})\n\nexport const getUser = userId => state => _.get(state.users, userId)\n\nexport const getUserByGlobalUID = globalUID => state => _.find(state.users, {globalUID: globalUID})\n\nexport const getLocalUser = state => _.find(state.users, {isLocal: true})\n\nexport const getRemoteUsers = state => _.pickBy(state.users, u => !u.isLocal)\n\nexport const getUsersByActiveRoom = roomName => state => _.filter(state.users, u => u.activeRoom === roomName)\n\nconst reduceUpdateUser = (state, user, update) => {\n    return {\n        ...state,\n        [user.id]: {\n            ...user,\n            ...update,\n        },\n    }\n}\n\nconst usersReducer = makeReducer({\n    ADD_USER: (state, action) => {\n        const {user} = action.payload\n        return {\n            ...state,\n            [user.id]: user\n        }\n    },\n    REMOVE_USER: (state, action) => {\n        const {userId} = action.payload\n        return _.omit(state, userId)\n    },\n    UPDATE_USER: (state, action) => {\n        const {userId, update} = action.payload\n        const user = state[userId] || {}\n\n        return reduceUpdateUser(state, user, update)\n    },\n    ADD_REMOTE_USER_TRACK: (state, action) => {\n        const {userId, trackType, isMuted} = action.payload\n        const user = state[userId] || {}\n\n        const update = {\n            [`has_${trackType}`]: true,\n            [`muted_${trackType}`]: isMuted\n        }\n\n        return reduceUpdateUser(state, user, update)\n    },\n    UPDATE_DOMINANT_SPEAKER: (state, action) => {\n        const dominantUserId = action.payload.userId\n\n\n        console.warn(\"UPDATE_DOMINANT_SPEAKER\", action)\n\n        _.forEach(state, (user) => {\n            user.isDominantSpeaker = (user.id === dominantUserId)\n        })\n\n        return state\n    }\n}, {})\n\nexport default usersReducer\n","import _ from 'lodash'\nimport {makeReducer} from '../utils'\n\nexport const pushMessage = (msg) => dispatch => {\n    const key = `${msg.id}-${(new Date()).getTime()}`\n\n    dispatch({\n        type: 'PUSH_MESSAGE',\n        payload: {msg},\n    })\n\n    // setTimeout(() => dispatch(deleteMessage(key)), 7000)\n}\n\nexport const deleteMessage = key => ({\n    type: 'DELETE_MESSAGE',\n    payload: {key},\n})\n\nexport const deleteAllMessages = () => ({\n    type: 'DELETE_ALL_MESSAGES'\n})\n\nexport const getUserMessages = userId => state => _.filter(state.messages, m => m.id === userId)\n\n// Get the last message from this user, sent in the last 10 secs\nexport const getUserLastMessage = (globalUID, localUserGlobalUID) => state => _.last(_.filter(state.messages, (m) => {\n    let ts_diff_secs = Math.abs(((new Date()) - m.ts) / 1000)\n    return m.globalUID === globalUID && (m.recipient === 'public' || m.recipient === localUserGlobalUID) &&  (ts_diff_secs<10)\n}))\n\nexport const getLastMessageFromLocalUser = (globalUID, localUserGlobalUID) => state => _.last(_.filter(state.messages, (m) => {\n    let ts_diff_secs = Math.abs(((new Date()) - m.ts) / 1000)\n    return m.recipient === globalUID && m.globalUID === localUserGlobalUID && (ts_diff_secs<10)\n}))\n\n\nexport const getAllMessages = state => state.messages\n\nconst messagesReducer = makeReducer({\n    PUSH_MESSAGE: (state, action) => {\n        return [...state, action.payload.msg]\n    },\n    DELETE_ALL_MESSAGES: (state, action) => {\n        return []\n    },\n    DELETE_MESSAGE: (state, action) => {\n        return _.filter(state, m => m.key !== action.payload.key)\n    },\n}, [])\n\nexport default messagesReducer\n","import _ from 'lodash'\nimport {makeReducer} from '../utils'\n\nexport const setAvailableInputDevices = (audio_inputs, video_inputs) => ({\n    type: 'SET_AVAILABLE_INPUT_DEVICES',\n    payload: {audio_inputs, video_inputs},\n})\n\nexport const setInputDevice = (type, id) => ({\n    type: 'SET_INPUT_DEVICE',\n    payload: {type, id},\n})\n\nexport const getInputDevices = state => {\n    // TODO(ASAF): what did I do wrong here?\n    // console.error(\"getInputDevices\", state)\n    return state.devices\n}\n\nconst devicesReducer = makeReducer({\n    SET_INPUT_DEVICE: (state, action) => {\n        const new_state = {...state}\n        if (action.payload.type===\"audio\") {\n            new_state.audio_input_id = action.payload.id\n        }\n        else {\n            new_state.video_input_id = action.payload.id\n        }\n        return new_state\n    },\n    SET_AVAILABLE_INPUT_DEVICES: (state, action) => {\n        const audio_inputs = action.payload.audio_inputs\n        const video_inputs = action.payload.video_inputs\n        return {\n            ...state,\n            audio_inputs: audio_inputs,\n            video_inputs: video_inputs\n        }\n        // return [...state, action.payload.msg]\n    },\n\n}, {\n    audio_inputs: [],\n    video_inputs: [],\n    video_input_id:null,\n    audio_input_id:null\n})\n\nexport default devicesReducer\n","import _ from 'lodash'\nimport {getFromLocalStorage, getLocalTracks, randomString} from '../utils'\nimport {getRoom, setRoom} from '../store/room'\nimport {\n    addUser,\n    updateUser,\n    addRemoteUserTrack,\n    removeUser,\n    updateDominantSpeaker,\n} from '../store/users'\nimport {deleteAllMessages, pushMessage} from '../store/messages'\nimport {jitsi as jitsiConfig} from '../config/config.dev'\nimport {setAvailableInputDevices, setInputDevice} from \"../store/devices\";\n\nconst JOIN_MINI_CONFERENCE_CMD = 'JOIN_MINI_CONFERENCE'\nconst LEAVE_MINI_CONFERENCE_CMD = 'LEAVE_MINI_CONFERENCE'\nconst SET_GLOBAL_UID_CMD = 'SET_GLOBAL_UID'\nconst SET_EMOJI_CMD = 'SET_EMOJI'\nconst DEFAULT_EMOJI = '😷'\nconst DEFAULT_USERNAME = 'anonymous'\n\nexport const initJitsi = store => {\n    console.warn('initJitsi')\n\n    window.JitsiMeetJS.init(jitsiConfig)\n\n    connect(store)\n}\n\nconst connect = ({dispatch, getState}) => {\n    const {CONNECTION_ESTABLISHED, CONNECTION_FAILED, CONNECTION_DISCONNECTED} = window.JitsiMeetJS.events.connection\n\n    window.JitsiConnection = new window.JitsiMeetJS.JitsiConnection(null, null, jitsiConfig)\n\n    const onConnectionSuccess = () => {\n        console.warn('onConnectionSuccess')\n\n        const roomConfig = getRoom(getState())\n        joinConference(dispatch, roomConfig)\n    }\n\n    const onConnectionFailed = e => {\n        console.error('Connection Failed!', e)\n    }\n\n    const disconnect = () => {\n        window.JitsiConnection.removeEventListener(CONNECTION_ESTABLISHED, onConnectionSuccess)\n        window.JitsiConnection.removeEventListener(CONNECTION_FAILED, onConnectionFailed)\n        window.JitsiConnection.removeEventListener(CONNECTION_DISCONNECTED, disconnect)\n    }\n\n    // bind connection events\n    window.JitsiConnection.addEventListener(CONNECTION_ESTABLISHED, onConnectionSuccess)\n    window.JitsiConnection.addEventListener(CONNECTION_FAILED, onConnectionFailed)\n    window.JitsiConnection.addEventListener(CONNECTION_DISCONNECTED, disconnect)\n\n    window.JitsiConnection.connect(undefined)\n}\n\n/////////////////\n// ROOMS\n/////////////////\nconst joinConference = (dispatch, roomConfig) => {\n    if (!window.JitsiConnection) return\n\n    console.warn('roomConfig=' + JSON.stringify(roomConfig))\n\n    const JitsiConference = window.JitsiConnection.initJitsiConference(roomConfig.jitsiRoomName, jitsiConfig)\n\n    const {\n        DISPLAY_NAME_CHANGED, MESSAGE_RECEIVED, PRIVATE_MESSAGE_RECEIVED,\n        CONFERENCE_JOINED, USER_JOINED, TRACK_ADDED, TRACK_REMOVED, USER_LEFT,\n        DOMINANT_SPEAKER_CHANGED\n    } = window.JitsiMeetJS.events.conference\n\n    JitsiConference.on(DISPLAY_NAME_CHANGED, (id, displayName) => {\n        dispatch(updateUser(id, {displayName}))\n    })\n\n    JitsiConference.on(DOMINANT_SPEAKER_CHANGED, (id) => {\n        dispatch(updateDominantSpeaker(id))\n    })\n\n    JitsiConference.addCommandListener(SET_EMOJI_CMD, e => {\n        const userId = e.attributes['id']\n        const emoji = e.attributes['emoji']\n\n        console.warn(SET_EMOJI_CMD, userId, emoji)\n\n        dispatch(updateUser(userId, {emoji}))\n    })\n\n    JitsiConference.addCommandListener(SET_GLOBAL_UID_CMD, e => {\n\n        const conference_id = e.attributes['conference_id']\n        const globalUID = e.attributes['globalUID']\n\n        console.warn(SET_GLOBAL_UID_CMD, conference_id, globalUID, e.attributes)\n\n        dispatch(updateUser(conference_id, {globalUID}))\n    })\n\n    JitsiConference.on(MESSAGE_RECEIVED, function (id, text, ts) {\n        // TODO(DROR): ts can be none here,\n        console.warn('MESSAGE_RECEIVED', id, text, ts)\n        let msg_object = null\n        try {\n            msg_object = JSON.parse(text)\n\n        } catch (e) {\n            return;\n        }\n\n        const globalUID = getFromLocalStorage('GLOBAL_UID')\n        msg_object.from_me = msg_object.globalUID === globalUID\n        msg_object.to_me = msg_object.recipient === globalUID\n\n        if (msg_object.from_me || msg_object.to_me || msg_object.recipient === \"public\") {\n            dispatch(pushMessage({\n                ...msg_object,\n                ts: ts ? new Date(Date.parse(ts)) : new Date(),  // ts is only sent when we refresh\n            }))\n        }\n\n    })\n\n\n    JitsiConference.on(CONFERENCE_JOINED, onConferenceJoined(dispatch))\n    JitsiConference.on(USER_JOINED, onUserJoined(dispatch))\n    JitsiConference.on(TRACK_ADDED, onRemoteTrackAdded(dispatch))\n    JitsiConference.on(TRACK_REMOVED, onRemoteTrackRemoved(dispatch))\n    JitsiConference.on(USER_LEFT, onUserLeft(dispatch))\n\n    JitsiConference.addCommandListener(JOIN_MINI_CONFERENCE_CMD, onSideRoomJoined(dispatch))\n    JitsiConference.addCommandListener(LEAVE_MINI_CONFERENCE_CMD, onSideRoomLeft(dispatch))\n\n    window.JitsiConference = JitsiConference\n\n    dispatch(setRoom(roomConfig))\n\n    JitsiConference.join()\n}\n\nexport const changeConference = roomConfig => dispatch => {\n    if (!window.JitsiConference) return\n\n    window.JitsiConference.leave()\n        .then(() => {\n            dispatch(deleteAllMessages())\n            joinConference(dispatch, roomConfig)\n        })\n}\n\nexport const switchInput = (type, deviceId) => dispatch => {\n    if (!window.JitsiMeetJS.mediaDevices.isDeviceChangeAvailable(type)) {\n        console.error(\"no isDeviceChangeAvailable()\")\n        return\n    }\n    let local_track = null\n    if (type === \"audio\") {\n        local_track = window.JitsiConference.getLocalAudioTrack()\n    } else {\n        local_track = window.JitsiConference.getLocalVideoTrack()\n    }\n\n    console.error(\"switchInput\", local_track)\n\n    window.JitsiConference.removeTrack(local_track).then(() => {\n        local_track && local_track.dispose()\n\n        // We want to explicitly ask for the device we last used\n        // for dror for example, switching rooms selects the snap camera instead of the regular\n        // This fixes it\n        const create_local_track_options = {\n            devices: [type],\n        }\n\n        if (type === \"audio\") {\n            create_local_track_options[\"micDeviceId\"] = deviceId\n        } else {\n            create_local_track_options[\"cameraDeviceId\"] = deviceId\n            create_local_track_options[\"constraints\"] = {\"height\": 180, \"width\": 180}\n        }\n\n        window.JitsiMeetJS.createLocalTracks(create_local_track_options)\n            .then(onLocalTracks(dispatch))\n            .catch((error) => {\n                throw error\n            })\n\n    })\n\n}\n\n\n/////////////////\n// LOCAL USER\n\n\n/////////////////\nconst onConferenceJoined = dispatch => () => {\n    console.warn('onConferenceJoined')\n\n    const userId = window.JitsiConference.myUserId()\n\n    const displayName = getFromLocalStorage('DISPLAY_NAME', DEFAULT_USERNAME)\n    const emoji = getFromLocalStorage('EMOJI', DEFAULT_EMOJI)\n    const globalUID = getFromLocalStorage('GLOBAL_UID', randomString(16))\n\n    dispatch(addUser({\n        id: userId,\n        globalUID: globalUID,\n        isLocal: true,\n        displayName: displayName,\n        emoji: emoji,\n        activeRoom: 'MAIN',\n    }))\n\n    // Send the cached display_name and emoji to other participants\n    setLocalDisplayName(userId, displayName)\n    setLocalEmoji(emoji)\n    setGlobalUID(globalUID)\n\n    // We want to explicitly ask for the device we last used\n    // for dror for example, switching rooms selects the snap camera instead of the regular\n    // This fixes it\n    const create_local_track_options = {\n        devices: [\"video\", \"audio\"],\n        cameraDeviceId: getFromLocalStorage(\"video_device_id\", null),\n        micDeviceId: getFromLocalStorage(\"audio_device_id\", null),\n        constraints: {\"height\": 180, \"width\": 180}\n    }\n\n    // Try to get audio/video. TODO(DROR): This might fail, we need the users's help\n    console.error(\"will run createLocalTracks\");\n    window.JitsiMeetJS.createLocalTracks(create_local_track_options)\n        .then(onLocalTracks(dispatch))\n        .catch((error) => {\n            throw error\n        })\n}\n\nconst onLocalTracks = dispatch => in_tracks => {\n\n    console.error(\"onLocalTracks\", in_tracks)\n\n    // Try to get device list\n    if (window.JitsiMeetJS.mediaDevices.isDeviceListAvailable()) {\n        window.JitsiMeetJS.mediaDevices.enumerateDevices((devices) => {\n            const audio_inputs = _.filter(devices, (d) => d.kind === \"audioinput\")\n            const video_inputs = _.filter(devices, (d) => d.kind === \"videoinput\")\n            dispatch(setAvailableInputDevices(audio_inputs, video_inputs))\n        })\n    }\n\n    _.map(in_tracks, (local_track) => {\n\n        window.localStorage.setItem(`${local_track.getType()}_device_id`, local_track.getDeviceId())\n        dispatch(setInputDevice(local_track.getType(), local_track.getDeviceId()))\n\n        local_track.addEventListener(\n            window.JitsiMeetJS.events.track.TRACK_MUTE_CHANGED,\n            onTrackMuteChanged(dispatch)\n        )\n\n        // local_track.addEventListener(\n        //     window.JitsiMeetJS.events.track.LOCAL_TRACK_STOPPED,\n        //     (track) => {\n        //         console.error(\"LOCAL_TRACK_STOPPED\", track)\n        //     }\n        // )\n\n        // Send lower quality video by default\n        window.JitsiConference.setSenderVideoConstraint(180)\n\n        if (local_track.getType() === 'video') {\n            const last_video_preference = getFromLocalStorage('SHOW_VIDEO', 'false')\n            if (last_video_preference === 'true') {\n                console.warn('unmuting video')\n                local_track.unmute()\n            } else {\n                local_track.mute()\n            }\n        } else {\n            // Always start with audio muted\n            local_track.mute().then(() => {\n                console.warn('audio muted...')\n            })\n        }\n\n        window.JitsiConference.addTrack(local_track).then(() => {\n\n            dispatch(updateUser(window.JitsiConference.myUserId(), {\n                hasTracks: true,\n                [`muted_${local_track.getType()}`]: local_track.isMuted(),\n                [`has_${local_track.getType()}`]: true\n            }))\n\n            // Send lower quality video by default, incase the first time didn't work\n            window.setTimeout(function () {\n                window.JitsiConference.setSenderVideoConstraint(180)\n            }, 1000)\n        })\n    })\n\n    dispatch(updateUser(window.JitsiConference.myUserId(), {hasTracks: true}))\n\n}\n\n/////////////////\n// REMOTE USERS\n/////////////////\nconst onUserJoined = dispatch => userId => {\n    const user = window.JitsiConference.getParticipantById(userId)\n    console.warn('onUserJoined', user)\n\n    dispatch(addUser({\n        id: userId,\n        activeRoom: 'MAIN',\n        displayName: user.getDisplayName()\n    }))\n}\n\nconst onRemoteTrackAdded = dispatch => track => {\n    if (track.isLocal()) {\n        window.JitsiConference.setSenderVideoConstraint(180)\n        return\n    }\n\n    console.warn('Remote TRACK_ADDED', track.getParticipantId(), track.isMuted(), track)\n\n    track.addEventListener(window.JitsiMeetJS.events.track.TRACK_MUTE_CHANGED, onTrackMuteChanged(dispatch))\n    track.addEventListener(window.JitsiMeetJS.events.track.LOCAL_TRACK_STOPPED, () =>\n        console.warn('remote track stoped')\n    )\n    track.addEventListener(\n        window.JitsiMeetJS.events.track.TRACK_AUDIO_OUTPUT_CHANGED,\n        (deviceId) =>\n            console.warn(`track audio output device was changed to ${deviceId}`)\n    )\n\n    const userId = track.getParticipantId()\n\n    dispatch(addRemoteUserTrack(userId, track.getType(), track.isMuted()))\n}\n\nconst onRemoteTrackRemoved = dispatch => track => {\n\n    console.warn('TRACK_REMOVED', track, track.containers)\n\n    let userId = track.getParticipantId()\n    if (!userId) {\n        userId = window.JitsiConference.myUserId()\n    }\n\n    dispatch(updateUser(userId, {\n        [`has_${track.getType()}`]: false,\n        [`muted_${track.getType()}`]: true\n    }))\n}\n\nconst onUserLeft = dispatch => userId => {\n    dispatch(removeUser(userId))\n}\n\n/////////////////\n// SIDE ROOMS\n/////////////////\nexport const joinSideRoom = roomName => {\n    const room = window.JitsiConference\n    if (!room) return\n\n    const userId = room.myUserId()\n\n    room.sendCommand(JOIN_MINI_CONFERENCE_CMD, {\n        attributes: {\n            from: userId,\n            to: roomName\n        }\n    })\n\n    // dispatch(updateUser(userId, { activeRoom: roomName }))\n}\n\nconst onSideRoomJoined = dispatch => e => {\n    const userId = e.attributes['from']\n    const to = e.attributes['to']\n\n    console.warn(JOIN_MINI_CONFERENCE_CMD, userId, to)\n\n    if (userId === window.JitsiConference.myUserId()) {\n        const {audio} = getLocalTracks()\n        if (audio) {\n            audio.unmute()\n        }\n    }\n\n    dispatch(updateUser(userId, {activeRoom: to}))\n}\n\nexport const leaveSideRoom = roomName => {\n    const room = window.JitsiConference\n    if (!room) return\n\n    room.removeCommand(JOIN_MINI_CONFERENCE_CMD)\n    room.sendCommandOnce(LEAVE_MINI_CONFERENCE_CMD, {\n        attributes: {\n            from: room.myUserId(),\n            to: roomName\n        }\n    })\n\n    // dispatch(updateUser(room.myUserId(), { activeRoom: 'MAIN' }))\n}\n\nconst onSideRoomLeft = dispatch => e => {\n    if (!window.JitsiConference) return\n\n    const userId = e.attributes['from']\n\n    console.warn(LEAVE_MINI_CONFERENCE_CMD, userId)\n\n    if (userId === window.JitsiConference.myUserId()) {\n        const {audio} = getLocalTracks()\n        audio && audio.mute()\n    }\n\n    dispatch(updateUser(userId, {activeRoom: 'MAIN'}))\n}\n\n//////////////////////\n// USER INTERACTIONS\n//////////////////////\nexport const onVideoMuteToggle = () => {\n    const {video} = getLocalTracks()\n    if (!video) {\n        return\n    }\n    if (video.isMuted()) {\n        video.unmute()\n        window.localStorage.setItem('SHOW_VIDEO', 'true')\n    } else {\n        video.mute()\n        window.localStorage.setItem('SHOW_VIDEO', 'false')\n    }\n}\n\nconst onTrackMuteChanged = dispatch => track => {\n    console.warn('TRACK_MUTE_CHANGED', track)\n\n    if (!track) {\n        return\n    }\n    const userId = track.ownerEndpointId ? track.ownerEndpointId : window.JitsiConference.myUserId()\n\n    dispatch(updateUser(userId, {\n        [`muted_${track.getType()}`]: track.isMuted()\n    }))\n\n}\n\nconst onLocalTrackMuteChanged = () => {\n}\n\nconst onLocalTrackStopped = () => {\n}\n\nconst OnLocalTrackAudioOutputChanged = () => {\n}\n\nexport const setLocalDisplayName = (userId, displayName) => {\n    if (!window.JitsiConference) return\n\n    console.warn('setLocalDisplayName')\n\n    // This will send the event name to other participants\n    window.JitsiConference.setDisplayName(displayName)\n\n    // Save this on localStorage\n    window.localStorage.setItem('DISPLAY_NAME', displayName)\n\n    // Because DISPLAY_NAME_CHANGED is not fired for local users, fire it\n    window.JitsiConference.eventEmitter.emit(window.JitsiMeetJS.events.conference.DISPLAY_NAME_CHANGED, userId, displayName)\n}\n\nexport const setLocalEmoji = (emoji) => {\n    if (!window.JitsiConference) return\n\n    // This will send the event name to other participants\n    window.JitsiConference.sendCommand(SET_EMOJI_CMD, {\n            attributes: {\n                'id': window.JitsiConference.myUserId(),\n                'emoji': emoji\n            }\n        }\n    )\n    window.localStorage.setItem('EMOJI', emoji)\n}\n\nexport const setGlobalUID = (globalUID) => {\n    if (!window.JitsiConference) return\n\n    // This will send the event name to other participants\n    window.JitsiConference.sendCommand(SET_GLOBAL_UID_CMD, {\n            attributes: {\n                'globalUID': globalUID,\n                'conference_id': window.JitsiConference.myUserId()\n            }\n        }\n    )\n    window.localStorage.setItem('GLOBAL_UID', globalUID)\n}\n\nexport const sendPublicMessage = (msg) => {\n    sendPrivateMessage(\"public\", \"public\", msg);\n}\n\nexport const sendPrivateMessage = (targetGlobalUID, targetDisplayName, msg) => {\n    if (!window.JitsiConference) return\n\n    console.error(\"sendPrivate\", targetGlobalUID, targetDisplayName, msg)\n\n    // TODO(DROR,ASAF): Can we access the state here?\n    const displayName = getFromLocalStorage('DISPLAY_NAME', DEFAULT_USERNAME)\n    const emoji = getFromLocalStorage('EMOJI', DEFAULT_EMOJI)\n\n\n    const msg_object = {\n        globalUID: getFromLocalStorage('GLOBAL_UID'),\n        displayName: displayName,\n        targetDisplayName: targetDisplayName,\n        emoji: emoji,\n        recipient: targetGlobalUID,\n        text: msg\n    }\n\n    window.JitsiConference.sendMessage(JSON.stringify(msg_object))\n}\n\n/////////////////\n// MISC\n/////////////////\nexport const kickInterruptedConnections = () => {\n    if (!window.JitsiConference) return\n\n    const participants = window.JitsiConference.getParticipants()\n    _.forEach(participants, p => {\n        if (p._connectionStatus === 'interrupted') {\n            console.warn('Kicking participant because of interrupted connection', p._id)\n            window.JitsiConference.kickParticipant(p._id)\n        }\n    })\n}\n\nexport const unload = () => {\n    if (!window.JitsiConference) return\n\n    _.each(window.JitsiConference.getLocalTracks(), track => track.dispose())\n    window.JitsiConference.leave()\n    window.connection.disconnect()\n}\n\n","import { useEffect } from 'react'\n\nconst useOutsideClick = (ref, callback) => {\n    const handleClick = e => {\n        if (ref.current && !ref.current.contains(e.target)) {\n            callback(e)\n        }\n    }\n    useEffect(() => {\n        document.addEventListener('click', handleClick)\n        return () => {\n            document.removeEventListener('click', handleClick)\n        }\n    })\n}\nexport default useOutsideClick","import Popup from './Popup'\n\nexport default Popup","import React, { useRef } from 'react'\nimport classNames from 'classnames'\nimport useOutsideClick from '../../hooks/useOutsideClick'\n\nconst Popup = ({ children, className, onOutsideClick }) => {\n\n    const ref = useRef(null)\n\n    useOutsideClick(ref, onOutsideClick)\n\n    return (\n        <div className={classNames('popup', className)} ref={ref}>\n            {children}\n        </div>\n    )\n}\n\nexport default Popup\n","import AutoHide from './AutoHide'\n\nexport default AutoHide","import React, { useEffect, useState } from 'react'\n\nconst AutoHide = ({ children, refreshKey, ttl = -1, hidden }) => {\n\n    const [isVisible, setIsVisible] = useState(true)\n\n    useEffect(() => {\n        if (ttl > -1) {\n            setIsVisible(true)\n            const timer = setTimeout(() => {\n                setIsVisible(false)\n            }, ttl)\n            return () => clearTimeout(timer)\n        }\n    }, [refreshKey])\n\n    return isVisible && !hidden && children\n}\n\nexport default AutoHide\n","import EmojiList from './EmojiSelection'\n\nexport default EmojiList","import React from 'react'\nimport _ from 'lodash'\nimport classNames from 'classnames'\nimport { useSelector } from 'react-redux'\nimport { getLocalUser } from '../../store/users'\nimport { setLocalEmoji } from '../../modules/meeting'\nimport EMOJIES from '../../config/config.emoji'\nimport './EmojiSelection.scss'\n\nconst EmojiSelection = ({ onSelection }) => {\n\n    const localUser = useSelector(getLocalUser)\n\n    const onEmojiClick = emoji => e => {\n        e.stopPropagation()\n\n        if (emoji === localUser.emoji) return\n\n        setLocalEmoji(emoji)\n        onSelection && onSelection(emoji)\n    }\n\n    return (\n        <div className=\"emoji-selection\">\n            {_.map(EMOJIES, (emoji, i) => (\n                <div key={`emoji-${i}`} onClick={onEmojiClick(emoji)}\n                     className={classNames('emoji-item', { selected: emoji === localUser.emoji })}>{emoji}</div>\n            ))}\n        </div>\n    )\n}\n\nexport default EmojiSelection\n","import SpeechBubble from './SpeechBubble'\n\nexport default SpeechBubble","import React from 'react'\nimport classNames from 'classnames'\nimport './SpeechBubble.scss'\n\nconst SpeechBubble = ({ children, className }) => {\n    return (\n        <div className={classNames(\"bubble-wrapper\", className)} onClick={e => e.stopPropagation()}>\n            <div className=\"speech-bubble\">{children}</div>\n        </div>\n    )\n}\n\nexport default SpeechBubble\n","import ChatInput from './TextInput'\n\nexport default ChatInput","import React, { useRef, useEffect } from 'react'\nimport _ from 'lodash'\nimport ContentEditable from 'react-contenteditable'\n\nimport './TextInput.scss'\n\nconst TextInput = ({ submit, dismiss }) => {\n\n    const ref = useRef()\n    const text = useRef('')\n\n    useEffect(() => {\n        ref && ref.current.focus()\n    }, [ref])\n\n    const onKeyPress = e => {\n        if (_.isEmpty(text.current)) return\n\n        // submit on \"enter\"\n        if (e.charCode === 13) {\n            submit && submit(text.current)\n            dismiss && dismiss()\n        }\n    }\n\n    const onKeyDown = e => {\n        // dismiss on \"esc\"\n        if (e.keyCode === 27) {\n            dismiss && dismiss()\n        }\n    }\n\n    const onChange = e => text.current = e.target.value\n\n    return (\n        <ContentEditable\n            innerRef={ref}\n            html={text.current}\n            className=\"text-input\"\n            onChange={onChange}\n            onKeyPress={onKeyPress} onKeyDown={onKeyDown}\n        />\n    )\n}\n\nexport default TextInput\n","import React, {useEffect, useRef, useState} from 'react'\nimport _ from 'lodash'\nimport {getTracks} from '../../utils'\nimport {sendPrivateMessage, sendPublicMessage, setLocalDisplayName} from '../../modules/meeting'\nimport {getUserLastMessage, getLastMessageFromLocalUser} from '../../store/messages'\nimport classNames from 'classnames'\nimport './UserDisplay.scss'\nimport {useSelector} from 'react-redux'\nimport Popup from '../Popup'\nimport AutoHide from '../AutoHide'\nimport EmojiSelection from '../EmojiSelection'\nimport SpeechBubble from '../SpeechBubble'\nimport TextInput from '../TextInput'\nimport { getLocalUser } from '../../store/users'\n\nconst attach = (track, ref) => track && ref.current && track.attach(ref.current)\n\nconst detachAndDispose = (track, ref) => {\n    if (track && ref.current) {\n        track.detach(ref.current)\n        track.dispose()\n    }\n}\n\nconst UserDisplay = ({id: userId, globalUID, isLocal, has_audio, has_video, muted_audio, muted_video, displayName, emoji, isAudioActive, isDominantSpeaker}) => {\n\n    const videoRef = useRef(null)\n    const audioRef = useRef(null)\n\n    const [videoTrack, setVideoTrack] = useState(null)\n    const [audioTrack, setAudioTrack] = useState(null)\n\n    const [popup, setPopup] = useState(null)\n\n    const localUser = useSelector(getLocalUser)\n\n    const bubbleMessage = useSelector(getUserLastMessage(globalUID, localUser.globalUID))\n\n    const lastMessageFromLocalUser = useSelector(getLastMessageFromLocalUser(globalUID, localUser.globalUID))\n\n    useEffect(() => {\n\n        console.error(\"useEffect\", has_video, videoRef)\n\n        if (has_video) {\n            const {video} = getTracks(userId, isLocal)\n            attach(video, videoRef)\n            setVideoTrack(video)\n        }\n\n        return () => {\n            if (has_video) {\n                detachAndDispose(videoTrack, videoRef)\n            }\n        }\n    }, [has_video, videoRef])\n\n    useEffect(() => {\n\n        if (has_audio) {\n            const {audio} = getTracks(userId, isLocal)\n            attach(audio, audioRef)\n            setAudioTrack(audio)\n        }\n\n        return () => {\n            if (has_audio) {\n                detachAndDispose(audioTrack, audioRef)\n            }\n        }\n    }, [has_audio, audioRef])\n\n    const renderInputBubble = ({ className, placeholder, submit, onHeightChange }) => (\n        <SpeechBubble className={className}>\n            <TextInput placeholder={placeholder}\n                       submit={submit}\n                       onHeightChange={onHeightChange}\n                       dismiss={hidePopup}/>\n        </SpeechBubble>\n    )\n\n    const onClick = e => {\n        e.stopPropagation()\n\n        if (isLocal) {\n            //send public message\n            setPopup(renderInputBubble({\n                placeholder: 'Say something',\n                submit: sendPublicMessage,\n            }))\n        } else {\n            // send private message\n            setPopup(renderInputBubble({\n                className: 'centered no-pointer',\n                placeholder: `Say something to ${displayName}:`,\n                submit: msg => sendPrivateMessage(globalUID, displayName, msg),\n            }))\n        }\n\n    }\n\n    const onNameClick = e => {\n        e.stopPropagation()\n\n        if (!isLocal) return\n\n        setPopup(renderInputBubble({\n            className: 'centered no-pointer',\n            placeholder: 'Choose name',\n            submit: newName => setLocalDisplayName(userId, newName),\n        }))\n    }\n\n    const hidePopup = () => setPopup(null)\n\n    const onEmojiClick = e => {\n        e.stopPropagation()\n\n        console.error(e.key)\n\n        if (e.shiftKey) {\n            // emoji clicked when shift is pressed\n            console.warn('emoji shift+click')\n            return\n        }\n\n        if (!isLocal) return\n\n        setPopup(<EmojiSelection onSelection={hidePopup}/>)\n    }\n\n    const videoClassNames = classNames('user-display video person', {\n        'video_self': isLocal,\n        'remote_participant': !isLocal,\n        'no_video': !has_video || muted_video,\n        'no_audio': !has_audio || muted_audio,\n        'muted': !isAudioActive && !isLocal,\n        'dominant': isDominantSpeaker,\n        'local_muted': !isAudioActive && isLocal,\n        [`id_${userId}`]: true,\n        [`globalUID_${globalUID}`]: true\n    })\n\n    const popupOpen = !_.isNil(popup)\n\n    return (\n        <div className={videoClassNames} onClick={onClick}>\n            <div className=\"emoji\" onClick={onEmojiClick}>{emoji}</div>\n            {has_audio && !muted_audio && (\n                <div className=\"emoji mic\">🎤</div>\n            )}\n            <div className=\"id\" onClick={onNameClick}>{displayName}</div>\n            {bubbleMessage && (\n                <AutoHide ttl={7000} refreshKey={bubbleMessage.ts} hidden={popupOpen}>\n                    <SpeechBubble className={classNames({ to_me: bubbleMessage.to_me })}>\n                        {bubbleMessage.text}\n                    </SpeechBubble>\n                </AutoHide>\n            )}\n            {lastMessageFromLocalUser && (\n                <AutoHide ttl={7000} refreshKey={lastMessageFromLocalUser.ts} hidden={popupOpen}>\n                    <SpeechBubble className=\"centered no-pointer from_me\">\n                        {lastMessageFromLocalUser.text}\n                    </SpeechBubble>\n                </AutoHide>\n            )}\n            <div className=\"in\"/>\n            {has_video && (\n                <video autoPlay=\"1\" ref={videoRef}/>\n            )}\n            {has_audio && (\n                <audio muted={isLocal || !isAudioActive} autoPlay=\"1\" ref={audioRef}/>\n            )}\n            {popupOpen && (\n                <Popup onOutsideClick={hidePopup}>{popup}</Popup>\n            )}\n        </div>\n    )\n}\n\nexport default UserDisplay\n","import UserDisplay from './UserDisplay'\n\nexport default UserDisplay","import React, { useCallback } from 'react'\nimport _ from 'lodash'\nimport UserDisplay from './index'\n\nconst UserList = ({ users, isAudioActive }) => {\n\n  const renderUser = useCallback(user => (\n    <UserDisplay key={`user-display-${user.id}`} {...user} isAudioActive={isAudioActive}/>\n  ), [users])\n\n  return (\n      <div className=\"users-display\">\n        {_.map(_.orderBy(users, 'id'), renderUser)}\n      </div>\n  )\n}\n\nexport default UserList\n","import SideRoom from './SideRoom'\n\nexport default SideRoom","import React, { useCallback } from 'react'\nimport _ from 'lodash'\nimport classNames from 'classnames'\nimport { useSelector } from 'react-redux'\nimport { getLocalUser, getUsersByActiveRoom } from '../../store/users'\nimport { joinSideRoom } from '../../modules/meeting'\nimport './SideRoom.scss'\nimport UserDisplay from '../UserDisplay'\n\nexport default ({ name, maxSeats }) => {\n\n    const users = useSelector(getUsersByActiveRoom(name))\n\n    const userCount = _.size(users)\n    const emptySeatCount = maxSeats - userCount\n\n    const localUser = useSelector(getLocalUser)\n\n    const localUserInRoom = localUser.activeRoom === name\n\n    const onFreeSeatClick = () => {\n        !localUserInRoom && joinSideRoom(name)\n    }\n\n    const renderUser = useCallback(user => (\n        <UserDisplay key={`user-display-${user.id}`} {...user} isAudioActive={localUserInRoom}/>\n    ), [users])\n\n    return (\n        <div className=\"side-room\" onClick={e => e.stopPropagation()}>\n            <div className=\"bg\"/>\n            {_.map(_.orderBy(users, 'id'), user => (\n                <div className=\"seat\">{renderUser(user)}</div>\n            ))}\n            {_.map(Array(emptySeatCount), (o, i) => {\n                return (\n                    <div className=\"seat\">\n                        <div className={classNames('user-display free-seat')} onClick={onFreeSeatClick}>\n                            <div className=\"id\">Speak up</div>\n                            <div className=\"in\"/>\n                        </div>\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n","import YouTubePlayer from './YouTubePlayer'\n\nexport default YouTubePlayer","import React, {useEffect, useState} from 'react'\nimport YouTube from 'react-youtube'\n\n\nconst YouTubePlayer = ({volume, ...props}) => {\n\n    const [player, setPlayer] = useState(null)\n\n    useEffect(() => {\n        if (player) {\n            player.setVolume(volume)\n        }\n    }, [volume])\n\n    const onReady = e => {\n        setPlayer(e.target)\n        props.onReady && props.onReady(e)\n    }\n\n    const onEnd = e => {\n        setPlayer(e.target)\n        props.onEnd && props.onEnd(e)\n    }\n\n    return (\n        <YouTube {...props} onReady={onReady} onEnd={onEnd}/>\n    )\n}\n\nexport default YouTubePlayer\n","import ChatMessage from \"./ChatMessage\";\n\nexport default ChatMessage\n","import React from 'react'\nimport './ChatMessage.scss'\nimport classNames from \"classnames\";\n\nconst nice_date = (date) => {\n    const hours_str = date.getHours().toString().padStart(2, 0)\n    const minutes_str = date.getMinutes().toString().padStart(2, 0)\n    return `${hours_str}:${minutes_str}`\n}\n\nconst ChatMessage = ({displayName, targetDisplayName, from_me, to_me, text, emoji, ts, recipient}) => {\n\n    const getFromText = (displayName) =>\n    {\n        if (to_me && (recipient !== \"public\"))\n        {\n            return `Private from ${displayName}`\n        }\n        return displayName\n    }\n\n    const getToText = (displayName) =>\n    {\n        if (from_me && (recipient !== \"public\"))\n        {\n            return `Private to ${displayName}`\n        }\n        return displayName\n    }\n\n    const messageClassNames = classNames('text-message', {\n        'private': recipient !== \"public\",\n        'public': recipient === \"public\",\n        'from_me': from_me,\n        'to_me': to_me\n    })\n\n    return (\n        <div className={messageClassNames}>\n            <span className=\"emoji\">{emoji}</span>\n            <span className=\"nick from\">{getFromText(displayName)}</span>\n            <span className=\"nick to\">{getToText(targetDisplayName)}</span>\n            <span className=\"msg-date\">({nice_date(ts)}) </span>\n            <span className=\"text\">{text}</span>\n        </div>\n    )\n}\n\nexport default ChatMessage\n","import ChatDrawer from './ChatDrawer'\n\nexport default ChatDrawer\n","import _ from 'lodash'\nimport React from 'react'\nimport './ChatDrawer.scss'\nimport {useSelector} from \"react-redux\";\nimport {getAllMessages} from \"../../store/messages\";\nimport ChatMessage from \"../ChatMessage\";\nimport {getLocalUser} from \"../../store/users\";\n\nconst ChatDrawer = ({}) => {\n\n    const all_messages = useSelector(getAllMessages)\n\n\n    return (\n        <div className=\"right-sidebar\">\n            {_.map(_.orderBy(all_messages, 'ts', 'desc'), (msg) => {\n                return (\n                    <ChatMessage key={msg.ts.toISOString().concat(msg.globalUID)} ts={msg.ts} text={msg.text} displayName={msg.displayName}\n                                 targetDisplayName={msg.targetDisplayName} from_me={msg.from_me} to_me={msg.to_me}\n                                 emoji={msg.emoji} recipient={msg.recipient}/>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default ChatDrawer\n","import Room from './Room'\n\nexport default Room","import React from 'react'\nimport _ from 'lodash'\nimport classNames from 'classnames'\nimport {useSelector} from 'react-redux'\nimport {videoArtPlayerConfig} from '../../config/config.videos'\nimport {leaveSideRoom} from '../../modules/meeting'\nimport {getLocalUser, getUsersByActiveRoom} from '../../store/users'\nimport UserList from '../UserDisplay/UserList'\nimport SideRoom from '../SideRoom'\nimport YouTubePlayer from '../YouTubePlayer'\nimport './Room.scss'\nimport ChatDrawer from \"../ChatDrawer\";\n\nconst Room = ({roomName, withVideoArt}) => {\n\n    const room = useSelector(state => state.room)\n    const mainAreaUsers = useSelector(getUsersByActiveRoom('MAIN'))\n\n    const localUser = useSelector(getLocalUser)\n\n    if (_.isEmpty(localUser)) {\n        return null\n    }\n\n    const userInMainArea = localUser.activeRoom === 'MAIN'\n\n    const onMeetingAreaClick = () => {\n        !userInMainArea && leaveSideRoom(localUser.activeRoom)\n    }\n\n    return (\n        <div className={classNames('room', _.toLower(roomName))}>\n            <div className=\"bg\"/>\n            {withVideoArt && (\n                <div className=\"video-art-top\">\n                    <div className=\"big-video-container\">\n                        <YouTubePlayer {...videoArtPlayerConfig}/>\n                    </div>\n                </div>\n            )}\n            <div className=\"main-area\" onClick={onMeetingAreaClick}>\n                {_.map(room.sideRooms, (sideRoom, i) => (\n                    <SideRoom key={`side-room-${i}`} {...sideRoom}/>\n                ))}\n                <UserList users={mainAreaUsers} roomName=\"MAIN\"/>\n                <ChatDrawer/>\n            </div>\n        </div>\n    )\n}\n\nexport default Room\n","import _ from 'lodash'\nimport React, {useState} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {getInputDevices} from \"../../store/devices\";\nimport classNames from \"classnames\";\nimport './options.scss'\nimport {switchInput} from \"../../modules/meeting\";\n\n\nconst MediaOption = ({input, type, local_input_id}) => {\n\n    const dispatch = useDispatch()\n\n    const onClick = (type, deviceId) => () => dispatch(switchInput(type, deviceId))\n\n    const inputClassNames = classNames('input', {\n        'is_active': local_input_id === input.deviceId\n    })\n\n    return (\n        <div onClick={onClick(type, input.deviceId)} className={inputClassNames}>{input.label}</div>\n    )\n}\n\nconst Options = () => {\n\n    const {audio_inputs, video_inputs, video_input_id, audio_input_id} = useSelector(getInputDevices)\n\n    return (\n        <div className=\"options-selector\" style={{\"background\": \"#fff\"}}>\n            <div className={\"header\"}>Audio inputs</div>\n            {_.map(audio_inputs, (audio_input) => {\n                return (<MediaOption input={audio_input} type=\"audio\" local_input_id={audio_input_id}/>)\n            })}\n            <div className={\"header\"}>Video inputs</div>\n            {_.map(video_inputs, (video_input) => {\n                return (<MediaOption input={video_input} type=\"video\" local_input_id={video_input_id}/>)\n            })}\n        </div>\n    )\n}\n\nexport default Options\n","import BottomNav from './BottomNav'\n\nexport default BottomNav","import React, {useState} from 'react'\nimport './BottomNav.scss'\nimport {onVideoMuteToggle, changeConference} from '../../modules/meeting'\nimport {ROOMS} from '../../consts'\nimport {useDispatch} from 'react-redux'\nimport Options from \"../Options/options\";\n\nconst BottomNav = ({roomName}) => {\n\n    const dispatch = useDispatch()\n\n    const [popup, setPopup] = useState(null)\n\n\n    const toggleFullscreen = () => {\n        if (!document.fullscreenElement) {\n            document.documentElement.requestFullscreen()\n        } else {\n            if (document.exitFullscreen) {\n                document.exitFullscreen()\n            }\n        }\n    }\n\n    const onOptionsClick = (e) => {\n        e.stopPropagation()\n        setPopup(<Options/>)\n    }\n\n    const goToRoom = roomConfig => () => dispatch(changeConference(roomConfig))\n\n    return (\n        <div className=\"bottom-nav\">\n            {roomName !== 'block' && (\n                <div className=\"button button-to-block\" onClick={goToRoom(ROOMS.block)}/>\n            )}\n            {roomName !== 'toilet' && (\n                <div className=\"button button-to-toilet\" onClick={goToRoom(ROOMS.toilet)}/>\n            )}\n            <div className=\"button mute-toggle\" onClick={onVideoMuteToggle}/>\n            <div className=\"button fullscreen-toggle\" onClick={toggleFullscreen}/>\n            <div className=\"button button-options\" onClick={onOptionsClick}/>\n            <Options/>\n        </div>\n    )\n}\n\nexport default BottomNav\n","import React from 'react'\nimport Room from './components/Room'\nimport BottomNav from './components/BottomNav'\nimport { playSoundtrack } from './config/config.dev'\nimport { soundtrackPlayerConfig } from './config/config.videos'\nimport { useSelector } from 'react-redux'\nimport { getLocalUser } from './store/users'\nimport YouTubePlayer from './components/YouTubePlayer'\nimport { getRoom } from './store/room'\n\nfunction App () {\n\n    const { roomName } = useSelector(getRoom)\n\n    const localUser = useSelector(getLocalUser)\n\n    const soundtrackVolume = localUser && localUser.activeRoom === 'MAIN' ? 100 : 40\n\n    return (\n        <div className=\"app\">\n            <Room roomName={roomName} withVideoArt={roomName === 'block'}/>\n            <BottomNav roomName={roomName}/>\n            {playSoundtrack && (\n                <YouTubePlayer {...soundtrackPlayerConfig} volume={soundtrackVolume}/>\n            )}\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { applyMiddleware, combineReducers, createStore, compose } from 'redux'\nimport logger from 'redux-logger'\nimport thunk from 'redux-thunk'\n// reducers\nimport roomReducer from './room'\nimport usersReducer from './users'\nimport messagesReducer from './messages'\nimport devicesReducer from \"./devices\";\n\nconst rootReducer = combineReducers({\n  users: usersReducer,\n  room: roomReducer,\n  messages: messagesReducer,\n  devices: devicesReducer\n})\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(\n    applyMiddleware(logger, thunk)\n  )\n)\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './css/main.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\nimport { initJitsi, kickInterruptedConnections, unload } from './modules/meeting'\nimport store from './store'\nimport { setInitialRoom } from './store/room'\n\n\n\n// init Jitsi\nwindow.JitsiMeetJS.setLogLevel(window.JitsiMeetJS.logLevels.ERROR)\n\nstore.dispatch(setInitialRoom())\n\ninitJitsi(store)\n\nsetInterval(kickInterruptedConnections, 5000);\n\n// TODO (ASAF) - check if both needed\nwindow.addEventListener(\"beforeunload\", unload)\nwindow.addEventListener(\"unload\", unload)\n\n// init React\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}